!function(t,r){for(var n in r)t[n]=r[n]}(window,function(t){var r={};function n(e){if(r[e])return r[e].exports;var a=r[e]={i:e,l:!1,exports:{}};return t[e].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=t,n.c=r,n.d=function(t,r,e){n.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:e})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,r){if(1&r&&(t=n(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var a in t)n.d(e,a,function(r){return t[r]}.bind(null,a));return e},n.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(r,"a",r),r},n.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},n.p="",n(n.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\nvar extent_namespaceObject = {};\n__webpack_require__.r(extent_namespaceObject);\n__webpack_require__.d(extent_namespaceObject, "boundingExtent", function() { return boundingExtent; });\n__webpack_require__.d(extent_namespaceObject, "buffer", function() { return buffer; });\n__webpack_require__.d(extent_namespaceObject, "containsCoordinate", function() { return containsCoordinate; });\n__webpack_require__.d(extent_namespaceObject, "containsExtent", function() { return containsExtent; });\n__webpack_require__.d(extent_namespaceObject, "containsXY", function() { return containsXY; });\n__webpack_require__.d(extent_namespaceObject, "createEmpty", function() { return createEmpty; });\n__webpack_require__.d(extent_namespaceObject, "createOrUpdate", function() { return createOrUpdate; });\n__webpack_require__.d(extent_namespaceObject, "createOrUpdateEmpty", function() { return createOrUpdateEmpty; });\n__webpack_require__.d(extent_namespaceObject, "createOrUpdateFromCoordinate", function() { return createOrUpdateFromCoordinate; });\n__webpack_require__.d(extent_namespaceObject, "createOrUpdateFromCoordinates", function() { return createOrUpdateFromCoordinates; });\n__webpack_require__.d(extent_namespaceObject, "extend", function() { return extend; });\n__webpack_require__.d(extent_namespaceObject, "extendCoordinate", function() { return extendCoordinate; });\n__webpack_require__.d(extent_namespaceObject, "extendCoordinates", function() { return extendCoordinates; });\n__webpack_require__.d(extent_namespaceObject, "extendFlatCoordinates", function() { return extendFlatCoordinates; });\n__webpack_require__.d(extent_namespaceObject, "extendRings", function() { return extendRings; });\n__webpack_require__.d(extent_namespaceObject, "extendXY", function() { return extendXY; });\n__webpack_require__.d(extent_namespaceObject, "getMargin", function() { return getMargin; });\n__webpack_require__.d(extent_namespaceObject, "getSize", function() { return getSize; });\n__webpack_require__.d(extent_namespaceObject, "getTopLeft", function() { return getTopLeft; });\n__webpack_require__.d(extent_namespaceObject, "getTopRight", function() { return getTopRight; });\n__webpack_require__.d(extent_namespaceObject, "getBottomLeft", function() { return getBottomLeft; });\n__webpack_require__.d(extent_namespaceObject, "getBottomRight", function() { return getBottomRight; });\n__webpack_require__.d(extent_namespaceObject, "getCenter", function() { return getCenter; });\n__webpack_require__.d(extent_namespaceObject, "getWidth", function() { return getWidth; });\n__webpack_require__.d(extent_namespaceObject, "getHeight", function() { return getHeight; });\n__webpack_require__.d(extent_namespaceObject, "getCorner", function() { return getCorner; });\n__webpack_require__.d(extent_namespaceObject, "intersects", function() { return intersects; });\n__webpack_require__.d(extent_namespaceObject, "isEmpty", function() { return isEmpty; });\n\n// CONCATENATED MODULE: ./src/modules/Map.js\n\r\n\r\n/**\r\n * @author wf\r\n * @alias je.x.Map\r\n * @class\r\n * @classdesc 地图类 <p>这是一个最基础的容器，基于mapbox地图进行了少量封装</p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass Map{\r\n\r\n\tconstructor(option) {\r\n\t\t/**\r\n\t\t * @member\r\n\t\t * @desc mapbox地图实例\r\n\t\t */\r\n\t\tthis.delegate_map = null;\r\n\t\tthis.mapCRS = null;\r\n\t\tthis.Z_INDEX_BASE = {\r\n\t\t\tBaseLayer: 100,\r\n\t\t\tOverlay: 325,\r\n\t\t\tFeature: 725,\r\n\t\t\tPopup: 750,\r\n\t\t\tControl: 1000\r\n\t\t};\r\n\t\tthis.spatialReference = {\r\n\t    \tprojection : "EPSG:4490"\r\n\t    };\r\n\t\tthis.attributes = {\r\n\t\t\tmapCRS : {\r\n\t\t\t\t// wgs84`~\r\n\t\t        topTileExtent:[-180, -270, 180, 90],\r\n\t\t        coordtransform:"none" \r\n\t\t    },\r\n\t\t    style: {\r\n\t\t        version: 8,\r\n\t\t        sources:{},\r\n\t\t        layers:[]\r\n\t\t    },\r\n\t        container: option.el,\r\n\t\t\t//isIntScrollZoom : true,\r\n\t        //isAttributionControl: false, \r\n\t        renderWorldCopies:false\r\n\t    };\r\n\t\t$.extend(this.attributes, option);\r\n\t\t$.extend(this.spatialReference, option.spatialReference);\r\n\t\t\r\n\t\tdelete this.attributes.el;\r\n\t\t\r\n\t\tthis.el = option.el;\r\n\t\tthis.$el = $("#"+option.el);\r\n\t\tthis.layers = [];\r\n\t\tthis.extendLayers = [];\r\n\t\t//设置代理\r\n\t\tGeoGlobe.Request.setProxyHost(gmapx.PROXY_URL);\r\n\t\tif(!option.map){\r\n\t\t\t// 外面没给，辣么我们自己搞一个·~\r\n\t\t\tthis._init_delegate_map(option);\r\n\t\t}else{\r\n\t\t\t// 从外面获得委派地图实例·~\r\n\t\t\tthis.delegate_map = option.map;\r\n\t\t}\r\n    }\r\n\r\n\t_init_delegate_map(option){\r\n\t\tthis.delegate_map = new GeoGlobe.Map(this.attributes);\r\n\t    // `~ \r\n\t    if(this.attributes.mapCRS == null){\r\n\t    \t// 墨卡托\r\n\t    \tthis.spatialReference.projection = "EPSG:3857";\r\n\t    }else{\r\n\t    \t// 经纬度\r\n\t    }\r\n\t}\r\n    \r\n    /**\r\n\t * @method\r\n     * @desc 绑定事件\r\n     * @param {String} event 事件名称\r\n     * @param {function} callback 回调函数\r\n     * @see Mapboxgl.Map#on\r\n     */\r\n    on(etype, callback){\r\n    \tthis.delegate_map.on(etype, callback);\r\n    }\r\n\t\r\n    /**\r\n\t * @method\r\n     * @desc 添加一个jemap的图层\r\n     * @param {Object} o 图层实例\r\n     */\r\n    /*addLayer(o){\r\n    \to.map = this.delegate_map;\r\n\t\to.jemap = this;\r\n\t\to.render(o);\r\n\t\t//TODO 因为je-map 在mapbox上集成其他插件 layers层级需要分别处理\r\n\t\tif(o.CLASS_NAME == "x.layer.Tile" || o.CLASS_NAME == "x.layer.VectorTile" || o.CLASS_NAME == "x.layer.Vector"){\r\n\t\t\tthis.layers.push(o);\r\n\t\t\tif(o.zIndex==null||o.zIndex==undefined){\r\n\t\t\t\to.zIndex = this.layers.length; \r\n\t\t\t}\r\n\t\t\tthis._sortMapBoxLayers();\r\n\t\t}else{//其他图层 不作处理 默认canvas在mapbox之上 \r\n\t\t\tthis.extendLayers.push(o);\r\n\t\t\tif(o.zIndex==null||o.zIndex==undefined){\r\n\t\t\t\to.zIndex = this.extendLayers.length; \r\n\t\t\t}\r\n\t\t}\r\n    }*/\r\n\taddLayer(o){\r\n\t\to.map = this.delegate_map;\r\n\t\to.jemap = this;\r\n\t\to.render(o);\r\n\t\t//this.setLayerZIndex(o, this.layers.length);\r\n\t\tthis.layers.push(o);\r\n\t\t\r\n\t\to.zIndex = this.layers.length; \r\n\t}\r\n\t\r\n    /**\r\n\t * @method\r\n     * @desc 根据zIndex排序\r\n     * @param {Array} layers \r\n     */\r\n\t_sortMapBoxLayers(){\r\n\t\tif(this.layers.length>1){\r\n\t\t\tfor(let i = this.layers.length-2;i>=0;i--){\r\n\t\t\t\tif(this.layers[i+1].zIndex<this.layers[i].zIndex){\r\n\t\t\t\t\tlet tmp = this.layers[i];\r\n\t\t\t\t\tthis.layers[i] = this.layers[i+1];\r\n\t\t\t\t\tthis.layers[i+1]=tmp;\r\n\t\t\t\t\t//TODO:移动mapbox layer顺序\r\n\t\t\t\t\tthis.moveLayer(this.layers[i],this.layers[i+1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    \r\n    /**\r\n\t * @method\r\n     * @desc 将一个图层移动到目标图层的下面，后者压盖前者\r\n     * @param {Object} layer 被移动的图层\r\n     * @param {Object} beforeLayer 目标图层\r\n     */\r\n\tmoveLayer(layer, beforeLayer){\r\n\t\tvar id = this._getMoveLayerId(layer, false);\r\n\t\tvar beforeId = this._getMoveLayerId(beforeLayer, true);\r\n        for(var j=0;j<id.length;j++){\r\n            this.delegate_map.moveLayer(id[j], beforeId[0]);\r\n        }\r\n\t}\r\n\r\n    _getMoveLayerId(layer, f){\r\n        let id = [], class_name = layer.CLASS_NAME;\r\n        switch(class_name){\r\n            case "x.layer.Tile" :\r\n                id.push("overlayer_" + layer.id);\r\n                break;\r\n            case "x.layer.VectorTile" :\r\n                //todo:获取矢量切片第一个或所有图层的ID\r\n                if(f){\r\n                    id.push(layer._layer_data[0].id)\r\n                }else{\r\n                    for(let j=0;j<layer._layer_data.length;j++){\r\n                        id.push(layer._layer_data[j].id);\r\n                    }\r\n                }\r\n                break;\r\n            case "x.layer.Vector" :\r\n            \tid.push("je-vector-layer-" + layer._id);\r\n            \tbreak;\r\n             \r\n        }\r\n        return id;\r\n    }\r\n\t\r\n    /**\r\n\t * @method\r\n     * @desc 移除一个jemap的图层\r\n     * @param {Object} o 图层实例\r\n     */\r\n\tremoveLayer(o){\r\n\t\to.destroy(o);\r\n\t\treturn;\r\n\t\t_.remove(this.layers, function(n) {\r\n\t\t\treturn n == o;\r\n\t\t});\r\n\t}\r\n\t\r\n    /**\r\n\t * @method\r\n     * @desc 设置中心\r\n     * @param {Array} o 中心点坐标， 例如 [120, 40]\r\n     */\r\n\tsetCenter(o){\r\n\t\tthis.delegate_map.setCenter(o);\r\n\t}\r\n\t\r\n\t/**\r\n\t *@method\r\n\t *@desc  地图的旋转角度\r\n\t *@param {Number} o 角度\r\n\t */\r\n\tsetBearing(o){\r\n\t\tthis.delegate_map.setBearing(o);\r\n\t}\r\n\t\r\n\t/**\r\n\t *@method\r\n\t *@desc 视角俯视的倾斜角度\r\n\t *@param {Number} o 角度\r\n\t */\r\n\tsetPitch(o){\r\n\t\tthis.delegate_map.setPitch(o);\r\n\t}\r\n\t\r\n    /**\r\n\t * @method\r\n     * @desc 缩放到指定层级\r\n     * @param {Number} o 层数\r\n     */\r\n\tzoomTo(o){\r\n\t\tthis.delegate_map.setZoom(o);\r\n\t}\r\n\t\r\n\tflyTo(o){\r\n\t\tthis.delegate_map.flyTo(o);\r\n\t}\r\n\r\n    /**\r\n\t * @method\r\n     * @desc 获得Mapboxgl的所对应的真实图层\r\n     * @param {Object} o jemap图层实例\r\n     * @return {Object} mapboxgl图层\r\n     */\r\n\tgetLayer(o){\r\n\t\treturn this.delegate_map.getLayer(o);\r\n\t}\r\n\t\r\n    /**\r\n\t * @method\r\n     * @desc 根据ID获得图层对象\r\n     * @param {String} id jemap的图层id\r\n     * @return {Object} jemap图层\r\n     */\r\n\tgetLayerById(id){\r\n\t\tfor(var i=0; i<this.layers.length; i++){\r\n\t\t\tvar tmp = this.layers[i];\r\n\t\t\tif(tmp.id == id){\r\n\t\t\t\treturn tmp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetLayerBy(){\r\n\t\t// todo`~\r\n\t}\r\n\t\r\n    /**\r\n\t * @method\r\n     * @desc 在视口范围发生变化后，更新地图大小\r\n     */\r\n\tupdateSize(){\r\n\t\tthis.delegate_map.resize();\r\n\t}\r\n\t\r\n\tsetLayerZIndex(layer, zIdx) {\r\n        layer.setZIndex(this.Z_INDEX_BASE[\'Overlay\'] + zIdx * 5 );\r\n    }\r\n\r\n    /**\r\n     * @method\r\n     * @desc 根据zIndex进行图层排序\r\n     */\r\n    _sortLayersByZIndex(){\r\n        if(!this.layers){\r\n            return;\r\n        }\r\n        let layers = this.layers;\r\n        for(let k=0;k<layers.length-1;k++){\r\n            for(let l=0;l<layers.length-1-k;l++){\r\n                if(layers[l].zIndex > layers[l+1].zIndex){\r\n                    let obj = layers[l];\r\n                    layers[l] = layers[l+1];\r\n                    layers[l+1] = obj;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\trender(){\r\n\t\t// ...\r\n\t}\r\n\r\n}\r\n\r\n/* harmony default export */ var modules_Map = (Map);\n// CONCATENATED MODULE: ./src/modules/layer/Base.js\n/**\r\n * @author wf\r\n * @alias je.x.layer.Base\r\n * @class\r\n * @classdesc jemap基础图层 \r\n * <p>继承该图层，即可接入jemap</p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass Base /** @lends je.x.layer.Base.prototype */{\r\n\t\r\n\tconstructor(option){\r\n\t\tthis._id = null;\r\n\t\t\r\n\t\tthis.attributes = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @member\r\n\t\t * @desc mapbox地图实例\r\n\t\t */\r\n\t\tthis.map = null;\r\n\t\tthis.jemap = null;\r\n\t\tthis.opacity = 1;\r\n\t\t\r\n\t\tthis.source = null;\r\n\t\t\r\n\t\tthis.visible = true;\r\n\t\t\r\n\t\tthis.extent = null;\r\n\t\t\r\n\t\tthis.zIndex = 0;\r\n\t\t\r\n\t\tthis.minResolution = 0;\r\n\t\t\r\n\t\tthis.maxResolution = 20;\r\n\t\t\r\n\t\t/**\r\n\t\t * @member\r\n\t\t * @desc 最小显示层级\r\n\t\t */\r\n\t\tthis.minZoom = 0;\r\n\t\t\r\n\t\t/**\r\n\t\t * @member\r\n\t\t * @desc 最大显示层级\r\n\t\t */\r\n\t\tthis.maxZoom = 20;\r\n\r\n\t\t$.extend(this, option);\r\n\t\t\r\n\t\t// 自动id`~\r\n\t\tthis._id = gmapx.util.sequenceId ++;\r\n\t\t\r\n\t\tthis.handleFunc={};\r\n\t\tthis.CLASS_NAME = "x.layer.Base";\r\n\t}\r\n\t\r\n\ton(type, func){\r\n        if(this.handleFunc[type]){\r\n            if(this.handleFunc[type].indexOf(func)===-1){\r\n                this.handleFunc[type].push(func);\r\n            }\r\n        }else{\r\n            this.handleFunc[type]=[func];\r\n        }\r\n\r\n    };\r\n\r\n    trigger(type, params){\r\n        try{\r\n            let target = this.handleFunc[type];\r\n            let count = target.length;\r\n            for (var i = 0; i < count; i++) {\r\n                target[i](params);\r\n            }\r\n            return true;\r\n        }catch (e){\r\n        \t//console.error(e);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    off(type,func){\r\n        try{\r\n            let target = this.handleFunc[type];\r\n            let index=target.indexOf(func);\r\n            if(index===-1)throw error;\r\n            target.splice(index,1);\r\n        }catch (e){\r\n        \tconsole.error(e);\r\n        }\r\n    };\r\n\r\n    once(type,func) {\r\n        this.on(type, func)?\r\n            this.off(type, func):null;\r\n    };\r\n    \t\r\n    /**\r\n\t * @method\r\n     * @desc 设置是否可见\r\n     * @param {Boolean} f true/false\r\n     */\r\n\tsetVisible (f){\r\n\t\tvar map = this.jemap.delegate_map;\r\n\t\tmap.setLayoutProperty("overlayer_" + this.id, \'visibility\', f ? "visible" : "none");\r\n\t\tif(f){\r\n\t\t\tthis.visible = true;\r\n\t\t}else{\r\n\t\t\tthis.visible = false;\r\n\t\t}\r\n\t}\r\n\t\r\n    /**\r\n\t * @method\r\n     * @desc 返回图层层叠顺序序号\r\n     * @return {Number} 当前图层层叠顺序\r\n     */\r\n\tgetZIndex (){\r\n\t\treturn this.zIndex;\r\n\t}\r\n\t\r\n    /**\r\n\t * @method\r\n     * @desc 设置图层的层叠序号\r\n     * @param {Number} zIndex 层叠序号\r\n     */\r\n\tsetZIndex (zIndex){\r\n\t\t/* 这个方法是逻辑上控制图层的叠加顺序\r\n\t\t * 目前只对Tile、VectorTile图层有效·~\r\n\t\t */\r\n        this.zIndex = zIndex;\r\n        let layers = this.jemap.layers;\r\n        for(let i=0; i<layers.length; i++){\r\n            if(layers[i].id != this.id && zIndex <= layers[i].zIndex){\r\n                let ids = this._getMoveLayerIds(layers[i], false);\r\n                if(ids.length == 0) continue;\r\n                let count = ids[0].length;\r\n                for(let j=0;j<count;j++){\r\n                    this.map.moveLayer(ids[0][j], ids[1][0]);\r\n                }\r\n                break;\r\n            }else if(layers[i].id != this.id && zIndex > layers[layers.length-1].zIndex){\r\n                let ids = this._getMoveLayerIds(layers[i], true);\r\n                if(ids.length == 0) continue;\r\n                let count = ids[0].length;\r\n                for(let j=0;j<count;j++){\r\n                    this.map.moveLayer(ids[0][j], ids[1][0]);\r\n                }\r\n            }\r\n        }\r\n        this.jemap._sortLayersByZIndex();\r\n\t}\r\n\t\r\n\t_getMoveLayerIds (layer, f){\r\n\t\tvar ids = [], class_name = this.CLASS_NAME, _getMoveLayerId = this.jemap._getMoveLayerId;\r\n\t\tif(f){\r\n\t\t\tids = [_getMoveLayerId(layer, false), _getMoveLayerId(this, true)];\r\n\t\t}else{\r\n\t\t\tids = [_getMoveLayerId(this, false), _getMoveLayerId(layer, true)];\r\n\t\t}\r\n\t\treturn ids;\r\n\t}\r\n\r\n    /**\r\n     * @method\r\n     * @desc 设置图层所在canvas的层叠序号\r\n     * @param {Number} zIndex 层叠序号\r\n     *\r\n     * 当前只能对mapV、maptalks、echartsGL及mapbox原生canvas进行操作\r\n     */\r\n    setCanvasZIndex(zIndex){\r\n        let container;\r\n        if(this._maptalksEle){\r\n            container = this._maptalksEle.container;\r\n        }else if(this.echartslayer){\r\n            container = this.echartslayer._container.children[0];\r\n        }else {\r\n            container = this.map.getCanvas();\r\n        }\r\n        container.style.zIndex = zIndex;\r\n    }\r\n\r\n\tclone (){\r\n\t\treturn _.cloneDeep(this);\r\n\t}\r\n\t\r\n};\r\n\r\n/* harmony default export */ var layer_Base = (Base);\n// CONCATENATED MODULE: ./src/modules/layer/Tile.js\n\r\n\r\n/**\r\n * @author wf\r\n * @alias je.x.layer.Tile\r\n * @class\r\n * @extends je.x.layer.Base\r\n * @classdesc 瓦片图层 \r\n * <p>通过配置实例化一个瓦片图层，可以通过WMTS数据源，加载到地图上显示</p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass Tile_Tile extends layer_Base /** @lends je.x.layer.Tile.prototype */{\r\n\t\r\n\tconstructor (option){\r\n        //je.x.layer.Base.prototype.initialize.apply(this, arguments);\r\n\t\tsuper(option);\r\n\t\t//console.log(option);\r\n\t\tthis._option = option;\r\n\t\tthis.id = option.id;\r\n\t\tthis._id = "overlayer_"+ option.id;\r\n\t\tthis.attributes = {\r\n\t    \t\t"id" : this._id,\r\n\t    \t\t"type" : "raster",\r\n\t    \t\t"source" : option.source.attributes,\r\n\t    \t\t"name" : option.name,\r\n\t    \t\t"minzoom" : this.minZoom,\r\n\t    \t\t"maxzoom" : this.maxZoom,\r\n\t    \t\t"paint" : {\r\n\t    \t\t\t"raster-opacity" : Number(option.source.options.Opacity)\r\n\t    \t\t}\r\n\t    \t};   \t\r\n\t    \r\n    \t//TODO: wms特殊处理·~\r\n\t\tif(this.source.CLASS_NAME == "x.source.WMS"){\r\n\t\t\t//this.id = this.source.attributes.id;\r\n\t\t\t//this._id = "overlayer_" + this.id;\r\n\t\t\t\r\n\t\t\tthis.source.attributes.id = this._id;\r\n\t\t\tthis.source.attributes.source.id = this._id;\r\n\t\t\t\r\n\t\t\tthis.attributes = this.source.attributes;\r\n\t\t}\r\n\t\t\t\r\n\t\tthis.CLASS_NAME = "x.layer.Tile";\r\n\t}\r\n\r\n\t/**\r\n\t * @methd\r\n\t * @desc 复制\r\n\t * */\r\n\tclone (){\r\n\t\treturn new gmapx.layer.Tile(this._option);\r\n\t}\r\n\r\n\t/**\r\n\t * @methd\r\n\t * @desc 销毁图层\r\n\t * */\r\n\tdestroy (opt){\r\n\t\tvar _t = this;\r\n\t\tvar id = this.attributes.id;\r\n\t\ttry{\r\n\t\t\tthis.map.removeLayer(id);\r\n\t\t\tthis.map.removeSource(id);\r\n\t    }catch(e){ }\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 渲染图层\r\n\t * */\r\n\trender (opt){\r\n\t\tvar _t = this;\r\n\t\ttry{\r\n\t\t\tif(this.source.wmts_obj == null){\r\n\t    \t\tthis.map.addLayer(opt.attributes);\r\n\t    \t}else{\r\n\t    \t\tthis.map.addLayer(this.source.wmts_obj);\r\n\t    \t}\r\n\t\t\t\r\n\t    }catch(e){\r\n\t    \t//console.error(e);\r\n\t    \tthis.map.on("load", function(){\t\t\t\r\n\t    \t\t\t_t.map.addLayer(opt.attributes);\r\n\t    \t\t});\r\n\t    }\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 获取顶层瓦片范围\r\n\t * */\r\n\tgetTopTileExtent(){\r\n\t\tlet s = this.source.options;\r\n\t\tlet obj = {\r\n\t\t\tscales : s.Scales,\r\n\t\t\ttileOrigin : s.TileOrigin,\r\n\t\t\ttileFullExtent : s.TileFullExtent,\r\n\t\t\tzoomOffset : s.ZoomOffset,\r\n\t\t\tunit : "m"\r\n\t\t};\r\n\t\t\r\n\t\tvar scale = parseFloat(obj.scales[0]);\r\n\t    //比例尺转分辨率\r\n\t    var resolution = GeoGlobe.Util.getResolutionFromScale(scale, obj.unit);\r\n\t    //最大分辨率\r\n\t    var maxResolution = resolution * Math.pow(2, obj.zoomOffset);\r\n\t    //金字塔顶层左上角第一个瓦片的左上角X轴\r\n\t    let topTileFromX = parseFloat(obj.tileOrigin.split(",")[0]),\r\n\t    //金字塔顶层左上角第一个瓦片的左上角Y轴\r\n\t    topTileFromY = parseFloat(obj.tileOrigin.split(",")[1]),\r\n\t    //金字塔顶层左上角第一个瓦片的右下角X轴\r\n\t    topTileToX = topTileFromX + maxResolution * 256,\r\n\t    //金字塔顶层左上角第一个瓦片的右下角Y轴\r\n\t    topTileToY = topTileFromY - maxResolution * 256;\r\n\t    var origin = obj.tileOrigin.split(",");\r\n\t    \r\n\t    return [topTileFromX, topTileToY, topTileToX,topTileFromY];\r\n\t}\r\n\t\r\n};\r\n\r\n/* harmony default export */ var layer_Tile = (Tile_Tile);\n// CONCATENATED MODULE: ./src/modules/layer/VectorTile.js\n\r\n\r\n/**\r\n * @author wf\r\n * @alias je.x.layer.VectorTile\r\n * @class\r\n * @extends je.x.layer.Base\r\n * @classdesc 矢量瓦片图层 \r\n * <p>通过配置实例化一个矢量瓦片图层，可以通过WMTS数据源，加载到地图上显示</p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass VectorTile_VectorTile extends layer_Base /** @lends je.x.layer.VectorTile.prototype */{\r\n\t\r\n\tconstructor (option){\r\n\t\t//_.extend(this, option);\r\n\t\tsuper(option);\r\n\t\t\r\n\t\tthis.source = option.source;\r\n\t\tthis._id = "overlayer_"+ option.id;\r\n\t\tthis.id = option.id;\r\n\t\tthis.attributes = {\r\n\t    \t\t"id" : this.id,\r\n\t    \t\t"type" : "raster",\r\n\t    \t\t"source" : option.source.attributes,\r\n\t    \t\t"name" : option.name,\r\n\t    \t\t"raster-opacity":1 \r\n\t    \t};   \t\r\n\t    \r\n\t    this._layer_data = [];\r\n\r\n\t\tthis.CLASS_NAME = "x.layer.VectorTile";\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 设置显示隐藏\r\n\t * */\r\n\tsetVisible (f){\r\n\t\tvar map = this.jemap.delegate_map;\r\n\t\tfor(var i=0; i<this._layer_data.length; i++){\r\n\t\t\tmap.setLayoutProperty(this._layer_data[i]["id"], \'visibility\', f ? "visible" : "none");\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 销毁图层\r\n\t * */\r\n\tdestroy (opt){\r\n\t\tvar _t = this;\r\n\t\tfor(var i=0; i<_t._layer_data.length; i++){\r\n\t\t\tvar id = _t._layer_data[i].id;\r\n\t\t\ttry{\r\n\t\t\t\tthis.map.removeLayer(id);\r\n\t\t\t}catch(e){}\r\n\t\t}\r\n\t\tthis.map.removeSource(this.source_id);\r\n\t}\r\n\r\n\t/**\r\n\t * @methd\r\n\t * @desc 渲染图层\r\n\t * */\r\n\trender (opt){\r\n\t\tvar _t = this;\r\n\t\ttry{\r\n\t    \t//this.map.on("load", function(){\r\n\t    \t\tvar o = _t.attributes.source;\r\n\t\t\t            if(o.sprite!=""){\r\n\t\t\t                sprite = gmapx.PROXY_URL + o.sprite;\r\n\t\t\t                //添加文字标注属性\r\n\t\t\t                _t.map.loadSprite(sprite);\r\n\t\t\t            }\r\n\t\t\t            if(o.glyphs!=""){\r\n\t\t\t                glyphs = gmapx.PROXY_URL + o.glyphs;\r\n\t\t\t               \t_t.map.style.glyphManager.setURL(glyphs);\r\n\t\t\t            }\r\n\t\t\t            \r\n\t    \t\r\n\t\t\t\t\tlet Layer_data = _t.attributes.source.layerData;\r\n\t\t\t\t\t_t.map.addLayer(Layer_data);\r\n\t\t\t\t\t\t\r\n\t\t            let Sourceid = Layer_data.source_id;\r\n\t\t            let LayerId =[];\r\n\t\t            for(var x = 0; x < Layer_data.layers.length;x++) {\r\n\t\t                LayerId.push(Layer_data.layers[x].id);\r\n\t\t            }\r\n\t\t            \r\n\t\t            _t.source_id = Sourceid;\r\n\t\t            _t._layer_data = Layer_data.layers;\r\n\t    \t\t//});\r\n\t    }catch(e){\r\n\t    \tconsole.log(e);\r\n\t    }\r\n\t}\r\n\t\r\n};\r\n\r\n/* harmony default export */ var layer_VectorTile = (VectorTile_VectorTile);\n// CONCATENATED MODULE: ./src/modules/layer/MapV.js\n\r\n//import * as mapv from \'mapv\';\r\n\r\n/**\r\n * @author wf\r\n * @description MapV图层 \r\n * <p>通过配置实例化一个MapV图层，使用CSV数据加载到地图上显示</p>\r\n * @constructor je.x.layer.MapV\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass MapV_MapV extends layer_Base /** @lends je.x.layer.MapV.prototype */{\r\n\t\r\n\t/*\r\n\tattributes : null,\r\n\t\r\n\tmap : null,\r\n\t\r\n\tdatasets : null,\r\n\t\r\n\tsource : null,\r\n\t\r\n\tmapVOptions : null,\r\n\t*/\r\n\t\r\n\tconstructor(option){\t\r\n\t\tsuper(option);\r\n\t\t$.extend(this,option);\r\n\t\t\r\n\t\treturn;\r\n\t    this.source = option.source;   \r\n\t\tthis.dataSet = option.mapVOptions;\r\n\t\tthis.mapVOptions = option.mapVOptions;\r\n\t}\r\n\t\r\n\tdrawAnimation(){\r\n            var ctx = this.ctx;\r\n            var data = this.data;\r\n            if (!data) {\r\n                return;\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.globalCompositeOperation = \'destination-out\';\r\n            ctx.fillStyle = \'rgba(0, 0, 0, .1)\';\r\n            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n            ctx.restore();\r\n\r\n            ctx.save();\r\n            if (this.options.shadowColor) {\r\n                ctx.shadowColor = this.options.shadowColor;\r\n            }\r\n\r\n            if (this.options.shadowBlur) {\r\n                ctx.shadowBlur = this.options.shadowBlur;\r\n            }\r\n\r\n            if (this.options.globalAlpha) {\r\n                ctx.globalAlpha = this.options.globalAlpha;\r\n            }\r\n\r\n            if (this.options.globalCompositeOperation) {\r\n                ctx.globalCompositeOperation = this.options.globalCompositeOperation;\r\n            }\r\n\r\n            var options = this.options;\r\n            for (var i = 0; i < data.length; i++) {\r\n                if (data[i].geometry.type === \'Point\') {\r\n                    ctx.beginPath();\r\n                    var maxSize = data[i].size || this.options.size;\r\n                    var minSize = data[i].minSize || this.options.minSize || 0;\r\n                    if (data[i]._size === undefined) {\r\n                        data[i]._size = minSize;\r\n                    }\r\n                    ctx.arc(data[i].geometry._coordinates[0], data[i].geometry._coordinates[1], data[i]._size, 0, Math.PI * 2, true);\r\n                    ctx.closePath();\r\n\r\n                    data[i]._size++;\r\n\r\n                    if (data[i]._size > maxSize) {\r\n                        data[i]._size = minSize;\r\n                    }\r\n                    ctx.lineWidth = 1;\r\n                    ctx.strokeStyle = data[i].strokeStyle || data[i]._strokeStyle || options.strokeStyle || \'yellow\';\r\n                    ctx.stroke();\r\n                    var fillStyle = data[i].fillStyle || data[i]._fillStyle || options.fillStyle;\r\n                    if (fillStyle) {\r\n                        ctx.fillStyle = fillStyle;\r\n                        ctx.fill();\r\n                    }\r\n                } else if (data[i].geometry.type === \'LineString\') {\r\n                    ctx.beginPath();\r\n                    var size = data[i].size || this.options.size || 5;\r\n                    var minSize = data[i].minSize || this.options.minSize || 0;\r\n                    if (data[i]._index === undefined) {\r\n                        data[i]._index = 0;\r\n                    }\r\n                    var index = data[i]._index;\r\n                    ctx.arc(data[i].geometry._coordinates[index][0], data[i].geometry._coordinates[index][1], size, 0, Math.PI * 2, true);\r\n                    ctx.closePath();\r\n\r\n                    data[i]._index++;\r\n\r\n                    if (data[i]._index >= data[i].geometry._coordinates.length) {\r\n                        data[i]._index = 0;\r\n                    }\r\n\r\n                    var strokeStyle = data[i].strokeStyle || options.strokeStyle;\r\n                    var fillStyle = data[i].fillStyle || options.fillStyle || \'yellow\';\r\n                    ctx.fillStyle = fillStyle;\r\n                    ctx.fill();\r\n                    if (strokeStyle && options.lineWidth) {\r\n                        ctx.lineWidth = options.lineWidth || 1;\r\n                        ctx.strokeStyle = strokeStyle;\r\n                        ctx.stroke();\r\n                    }\r\n                }\r\n            }\r\n            ctx.restore();\r\n    }\r\n\t_createCanvas (){\r\n\t\tvar canvas = document.createElement(\'canvas\');\r\n\t\tcanvas.id = this.layerID;\r\n\t\tcanvas.style.position = \'absolute\';\r\n\t\tcanvas.style.top = 0 + "px";\r\n\t\tcanvas.style.left = 0 + "px";\r\n\t\tcanvas.width = parseInt(this.map.getCanvas().style.width);\r\n\t\tcanvas.height = parseInt(this.map.getCanvas().style.height);\r\n\t\tcanvas.style.width = this.map.getCanvas().style.width;\r\n\t\tcanvas.style.height = this.map.getCanvas().style.height;\r\n\t\tvar global$2 = typeof window === \'undefined\' ? {} : window;\r\n\t\tvar devicePixelRatio = this.devicePixelRatio = global$2.devicePixelRatio;\r\n\t\tif (this.mapVOptions.context == \'2d\') {\r\n\t\t    canvas.getContext(this.mapVOptions.context).scale(devicePixelRatio, devicePixelRatio);\r\n\t\t}\r\n\t\treturn canvas;\r\n\t}\r\n\t\r\n\tsetVisible(f){\r\n\t\tlet div = this._maptalksEle.container;\r\n\t\t\r\n\tconsole.log(div);\r\n\t\tif(f){\r\n\t\t\t$(div).show();\r\n\t\t\tthis.visible = true;\r\n\t\t}else{\r\n\t\t\t$(div).hide();\r\n\t\t\tthis.visible = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// 删图层·~\r\n\tdestroy (opt){\r\n\t\t//`~\r\n\t\tthis._maptalksEle.remove();\r\n\t}\r\n\t// 加图层·~\r\n\trender (opt){\r\n\t\tthis.source.map = this.map;\r\n\t\tvar me = new GeoGlobe.MaptalksEle({\r\n\t\t\t\telmapOptions : {\r\n\t\t\t\t\tspatialReference : this.jemap.spatialReference\r\n\t\t\t\t}\r\n\t\t\t}), _t = this;\r\n\t\tthis._maptalksEle = me;\r\n\t    me.addTo(this.map);\r\n\t    var elmap = me.getElMap(), data = [];\r\n\t    \r\n\t    for(var i=0; i<this.datasets.length; i++){\r\n    \t\tnew mapv.MaptalksLayer(\'mapv\' + i, this.datasets[i], this.mapVOptions[i]).addTo(elmap);\r\n\t    }\r\n\t    \r\n\t    return;\r\n\t    \r\n    \tvar mapvLayer1 = new mapv.MaptalksLayer(\'mapv\', this.datasets[0], this.mapVOptions[0]).addTo(elmap);\r\n    \tvar mapvLayer2 = new mapv.MaptalksLayer(\'mapv1\', this.datasets[1], this.mapVOptions[1]).addTo(elmap);\r\n\t    \r\n\t    // TODO: 构造mapv·~\r\n\t    var map = this.map;\r\n\t    \r\n\t    this.canvas = this._createCanvas();\r\n        \r\n        this.mapContainer = map.getCanvasContainer();\r\n        this.mapContainer.appendChild(this.canvas);\r\n        this.mapContainer.style.perspective = this.map.transform.cameraToCenterDistance + \'px\';\r\n\t    this.ctx = this.canvas.getContext("2d");\r\n\t    this.data = this.dataSet.get();\r\n\t    this.options = this.mapVOptions;\r\n\t    \r\n        //this.MapvRenderer._canvasUpdate();\r\n        \r\n        this.drawAnimation();\r\n        \r\n\t}\r\n\t\r\n};\r\n\r\n/* harmony default export */ var layer_MapV = (MapV_MapV);\n// CONCATENATED MODULE: ./src/modules/layer/Vector.js\n\r\n\r\nclass Vector_Vector extends layer_Base /** @lends je.x.layer.Vector.prototype */{\r\n\t\r\n\tconstructor (option){\r\n\t\tsuper(option);\r\n\t\t\r\n\t\tlet j = 0, stops = [];\r\n\t\t\t\r\n\t\tthis._id = GeoGlobe.Util.randomStr(6);\r\n\t\t\r\n\t\t// 色卡·~\r\n\t\tthis.color = [\'#c23531\',\'#2f4554\', \'#61a0a8\', \'#d48265\', \'#91c7ae\',\'#749f83\',  \'#ca8622\', \'#bda29a\',\'#6e7074\', \'#546570\', \'#c4ccd3\'];\r\n\t\tthis.label = {\r\n\t\t\tshow : true,\r\n\t\t\ttext : "",\r\n\t\t\ttextStyle : {\r\n\t\t\t\tcolor : "#fff",\r\n\t\t\t\tfontStyle: \'normal\',\r\n\t\t\t\tfontWeight: \'normal\',\r\n\t\t\t\tfontFamily: \'sans-serif\',\r\n\t\t\t\tfontSize: 12,\r\n\t\t\t}\r\n\t\t};\r\n\t\t$.extend(this.color, option.color);\r\n\t\t$.extend(this.label, option.label);\r\n\t\t\r\n\t\t// paint·~\r\n\t\tthis.color.forEach((value) => {\r\n\t\t\tstops.push([j, value]);\r\n\t\t\tj++;\r\n\t\t});\r\n\t\tif(this.type == "fill"){\r\n\t\t\tthis.paint = {\r\n\t\t\t\t\'fill-color\': {\r\n\t\t\t\t\t\'stops\': stops,\r\n\t\t\t\t\t\'property\': "_je_vector_color_index"\r\n\t            }\r\n\t\t\t};\r\n\t\t}else if(this.type == "fill-extrusion"){\r\n\t\t\tthis.paint = {\r\n\t\t\t\t\'fill-extrusion-color\': {\r\n\t\t\t\t\t\'stops\': stops,\r\n\t\t\t\t\t\'property\': "_je_vector_color_index"\r\n\t            }\r\n\t\t\t};\r\n\t\t}else{\r\n\t\t\tthis.paint = {};\r\n\t\t}\r\n\t\t\t\r\n\t\tthis.layout = {};\r\n\t\tthis.filter = null;\r\n\r\n\t\t$.extend(this.paint, option.paint);\r\n\t\t$.extend(this.layout, option.layout);\r\n\t\t$.extend(this.filter, option.filter);\r\n\t\t\r\n\t\tthis.id = "je-vector-layer-" + this._id;\r\n\t\tthis.EVENT_TYPE = [];\r\n\t\tthis.CLASS_NAME = "x.layer.Vector";\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 销毁图层\r\n\t * */\r\n\tdestroy (opt){\r\n\t\tlet _t = this;\r\n\t\t_t.map.removeSource("je-vector-source-" + _t._id);\r\n\t\t_t.map.removeLayer("je-vector-layer-" + _t._id);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 设置显示隐藏\r\n\t * */\r\n\tsetVisible (f){\r\n\t\tvar map = this.jemap.delegate_map;\r\n\t\tmap.setLayoutProperty("je-vector-layer-" + this._id, \'visibility\', f ? "visible" : "none");\r\n\t\tif(f){\r\n\t\t\t$(".je-vector-layer-"+ this._id +"-marker").show();\r\n\t\t\tthis.visible = true;\r\n\t\t}else{\r\n\t\t\t$(".je-vector-layer-"+ this._id +"-marker").hide();\r\n\t\t\tthis.visible = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 渲染图层\r\n\t * */\r\n\trender (opt){\r\n\t\tlet _t = this;\r\n\t\tthis.source.getData((result) => {\r\n\t\t\t// todo: 给数据加上 _je_vector_color_index 属性·~\r\n\t\t\tlet i = 0;\r\n\t\t\tresult.features.forEach((value) => {\r\n\t\t\t\tvalue.properties["_je_vector_color_index"] = i;\r\n\t\t\t\ti++;\r\n\t\t\t\ti = (i > _t.color.length) ? 0 : i;\r\n\t\t\t\t\r\n\t\t\t\tlet bbox, center;\r\n\t\t\t\ttry{\r\n\t\t\t\t\tbbox = gmapx.extent.boundingExtent(value.geometry.coordinates[0]);\r\n\t\t\t\t\tcenter = gmapx.extent.getCenter(bbox);\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet label = value.properties[_t.label.text];\r\n\t\t\t\t\r\n\t\t\t\tif(label){\r\n\t\t\t\t\t//console.log(value);\r\n\t\t\t\t\t//console.log(label);\r\n\t\t\t\t\t//console.log(bbox);\r\n\t\t\t\t\t//console.log(center);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet marker = new mapboxgl.Marker();\r\n\t\t\t\t\tmarker.setLngLat(center);\r\n\t\t\t\t    marker.addTo(_t.map);\r\n\t\t\t\t    \r\n\t\t\t\t    marker._element.innerHTML = label;\r\n\t\t\t\t    let s = _t.label.textStyle;\r\n\t\t\t\t    $(marker._element).css({\r\n\t\t\t\t    \t"color" : s.color,\r\n\t\t\t\t    \t"display" : (_t.label.show ? "block" : "none"),\r\n\t\t\t\t    \t"font-style" : s.fontStyle,\r\n\t\t\t\t    \t"font-weight" : s.fontWeight,\r\n\t\t\t\t    \t"font-family" : s.fontFamily,\r\n\t\t\t\t    \t"font-size" : s.fontSize + "px",\r\n\t\t\t\t    });\r\n\t\t\t\t    $(marker._element).addClass("je-vector-layer-"+ this._id +"-marker")\r\n\t\t\t\t    /*\r\n\t\t\t\t    $(marker._element).css("color", _t.label.textStyle.color)\r\n\t\t\t\t    \t.css("display", (_t.label.show ? "block" : "none"));\r\n\t\t\t\t    */\r\n\t\t\t    }\r\n\t\t\t});\r\n\r\n\t\t\t//if(_t.map.isStyleLoaded()) {\r\n\t\t\t\t_t.map.addSource("je-vector-source-" + _t._id, {\r\n\t\t\t\t\t"type" : "geojson",\r\n\t\t\t\t\t"data" : result\r\n\t\t\t\t});\r\n\t\t\t\tlet option = {\r\n\t\t\t\t\tid :"je-vector-layer-" + _t._id,\r\n\t\t\t\t\tsource:"je-vector-source-" + _t._id,\r\n\t\t\t\t\ttype: _t.type,\r\n\t\t\t\t\tpaint: _t.paint,\r\n\t\t\t\t\tlayout : _t.layout\r\n\t\t\t\t};\r\n\t\t\t\tif(_t.filter != null){ \r\n\t\t\t\t\toption.filter = _t.filter;\r\n\t\t\t\t};\r\n\t\t\t\tconsole.log("gmapx.log:");\r\n\t\t\t\tconsole.log(option);\r\n\t\t\t\t_t.map.addLayer(option);\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\t_t.trigger("load", {});\r\n\t\t\t\t/*\r\n\t\t\t} else {\r\n\t\t\t\t_t.map.on(\'load\',()=>{\r\n\t\t\t\t\t_t.map.addSource("je-vector-source-" + _t._id, {\r\n\t\t\t\t\t\t"type" : "geojson",\r\n\t\t\t\t\t\t"data" : result\r\n\t\t\t\t\t});\r\n\t\t\t\t\t_t.map.addLayer({\r\n\t\t\t\t\t\tid :"je-vector-layer-" + _t._id,\r\n\t\t\t\t\t\tsource:"je-vector-source-" + _t._id,\r\n\t\t\t\t\t\ttype: _t.type,\r\n\t\t\t\t\t\tpaint: _t.paint,\r\n\t\t\t\t\t\tlayout : _t.layout\r\n\t\t\t\t\t\t//"filter": [] \r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t});\r\n\t\t\t\r\n\t}\r\n\t\r\n};\r\n\r\n/* harmony default export */ var layer_Vector = (Vector_Vector);\n// CONCATENATED MODULE: ./src/modules/layer/StatisticalChart.js\n\r\n\r\n/**\r\n * @author wf\r\n * @alias je.x.layer.StatisticalChart\r\n * @class\r\n * @extends je.x.layer.Base\r\n * @classdesc 统计图表图层 \r\n * <p>通过配置实例化一个统计图表图层，加载到地图上显示</p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass StatisticalChart_StatisticalChart extends layer_Base /** @lends je.x.layer.StatisticalChart.prototype */{\r\n\t\r\n\tconstructor(option){\r\n\t\tsuper(option);\r\n\t\t/**色卡**/\r\n        this.color = [\'#0960a3\', \'#0081d2\', \'#00d6e0\', \'#01aae1\', \'#00d3aa\', \'#8bd36d\', \'#63b44b\'];\r\n        /**默认图表框大小**/\r\n        this.width = 260;\r\n        this.height = 120;\r\n        this._index = 0;\r\n        \r\n        $.extend(this,option);\r\n        \r\n        this.markers = [];\r\n        this.CLASS_NAME = "x.layer.StatisticalChart";\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 设置显示隐藏\r\n\t * */\r\n\tsetVisible (f){\r\n\t\t// todo 隐藏放echarts的marker~~\r\n\t\tvar obj = $(".graphTheme");\r\n\t\tif(f){\r\n\t\t\tobj.show();\r\n\t\t\tthis.visible = true;\r\n\t\t}else{\r\n\t\t\tobj.hide();\r\n\t\t\tthis.visible = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 销毁图层\r\n\t * */\r\n\tdestroy(){\r\n        this.clearLayer();\r\n        $(".graphList").remove();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 渲染图层\r\n\t * */\r\n\trender(){\r\n\t    /***绑定geojson数据源**/\r\n\t    //this._index = 0;\r\n        if(this.source){\r\n            this.source.getData((result) =>{\r\n                this.data = result;\r\n                this.creatGraphList();\r\n                this.bindEvent();\r\n                /**默认显示柱状图**/\r\n                if(this.type=="bar3D"){\r\n                \tthis.createBar3DThemeLayer(this);\r\n                }else{\r\n                \tthis.createBarThemeLayer(this);\r\n                }\r\n                \r\n            });\r\n        }else {\r\n            this.creatGraphList();\r\n            this.bindEvent();\r\n            /**默认显示柱状图**/\r\n            this.createBarThemeLayer(this);\r\n        }\r\n\t}\r\n    _render (opt,typename,i) {\r\n        var marker = new mapboxgl.Marker();\r\n        marker.setLngLat(opt.geometry.coordinates);\r\n        marker.addTo(this.map);\r\n\r\n        var div = marker._element;\r\n        $(div).addClass("graphTheme");\r\n        $(div).css({\r\n            "width":this.width,\r\n            "height":this.height,\r\n            "border-radius":"5px"\r\n        });\r\n\r\n        //创建Echarts option\r\n        let option;\r\n        if(typename && typename === "Bar"){\r\n            option = this.createBarOption(opt);\r\n        }else if(typename && typename === "Bar3D"){\r\n            option = this.createBar3DOption(opt,i);\r\n        }else if(typename && typename === "Line"){\r\n            option = this.createLineOption(opt);\r\n        }else if(typename && typename === "Point"){\r\n            option = this.createPointOption(opt);\r\n        }else if(typename && typename === "Pie"){\r\n            option = this.createPieOption(opt);\r\n        }else if(typename && typename === "Circular"){\r\n            option = this.createCircularOption(opt);\r\n        }\r\n        // 创建图·~\r\n        if(typename === "Bar3D"){\r\n            Highcharts.chart(div,option);\r\n            var width = $(".highcharts-container").width()/2;\r\n            $(".highcharts-container").css({"left":"50%","margin-left":"-"+width+"px"})\r\n        }else{\r\n            let obj = echarts.init(div);\r\n            obj.setOption(option);\r\n        }\r\n\r\n    \tthis._index++;\r\n        this.markers.push(marker);\r\n    }\r\n    clearLayer(){\r\n        $.each(this.markers, function(i,n){\r\n            n.remove();\r\n        });\r\n        this.markers = [];\r\n        try {\r\n            this.map.removeControl(this.legendControl)\r\n        }catch(e){}\r\n    }\r\n    bindEvent () {\r\n        var _t = this;\r\n        $(".graph").on("click", function () {\r\n            $(".graph").removeClass("active");\r\n            _t.clearLayer();\r\n        });\r\n        $(".graphList").on("click","#bar", function () {\r\n            $("#bar").addClass("active");\r\n            _t.createBarThemeLayer(_t);\r\n        });\r\n        $(".graphList").on("click","#bar3d", function () {\r\n            $("#bar3d").addClass("active");\r\n            _t.createBar3DThemeLayer(_t);\r\n        });\r\n        $(".graphList").on("click","#line", function () {\r\n            $("#line").addClass("active");\r\n            _t.createLineThemeLayer(_t);\r\n        });\r\n        $(".graphList").on("click","#point", function () {\r\n            $("#point").addClass("active");\r\n            _t.createPointThemeLayer(_t);\r\n        });\r\n        $(".graphList").on("click","#pie", function () {\r\n            $("#pie").addClass("active");\r\n            _t.createPieThemeLayer(_t);\r\n        });\r\n        $(".graphList").on("click","#circular", function () {\r\n            $("#circular").addClass("active");\r\n            _t.createCircularThemeLayer(_t);\r\n        });\r\n        _t.jemap.delegate_map.on("render",function () {\r\n            _t.freshCharts(_t)\r\n        });\r\n    }\r\n    createBarThemeLayer (_t) {\r\n        _t.data.features.forEach( (feature) => _t._render(feature,"Bar"));\r\n        //_t.freshCharts(_t);\r\n    }\r\n    createBar3DThemeLayer (_t) {\r\n        _t.data.features.forEach((feature,i) =>{\r\n            feature.properties.data2 = feature.properties.data;\r\n            _t._render(feature,"Bar3D",i);\r\n        });\r\n        _t.freshCharts(_t);\r\n    }\r\n    createLineThemeLayer (_t) {\r\n        _t.data.features.forEach((feature) => _t._render(feature,"Line"));\r\n        _t.freshCharts(_t);\r\n    }\r\n    createPointThemeLayer (_t) {\r\n        _t.data.features.forEach( (feature) => {\r\n            var data = [];\r\n            feature.properties.data.forEach((fea,i) => data.push([i,fea]));\r\n            feature.properties.data3 = data;\r\n            _t._render(feature,"Point");\r\n        });\r\n        _t.freshCharts(_t);\r\n    }\r\n    createPieThemeLayer (_t) {\r\n        _t.data.features.forEach( (feature) =>{\r\n            var data = [];\r\n            feature.properties.data.forEach((fea,i) =>{\r\n                data.push({\r\n                    value:fea,\r\n                    name:_t.axisXLabels[i]\r\n                })\r\n            });\r\n            feature.properties.data4 = data;\r\n            _t._render(feature,"Pie");\r\n        });\r\n        _t.addLegend();\r\n        _t.freshCharts(_t);\r\n    }\r\n    createCircularThemeLayer (_t) {\r\n        _t.data.features.forEach((feature) =>{\r\n            var data = [];\r\n            feature.properties.data.forEach((fea,i) =>{\r\n                data.push({\r\n                    value:fea,\r\n                    name:_t.axisXLabels[i]\r\n                })\r\n            });\r\n            feature.properties.data5 = data;\r\n            _t._render(feature,"Circular");\r\n        });\r\n        _t.addLegend();\r\n        _t.freshCharts(_t);\r\n    }\r\n    /** 创建图表选择列表 **/\r\n    creatGraphList () {\r\n    \ttry{\r\n\t    \tif(!this.chartHandler.show){\r\n\t    \t\treturn;\r\n\t    \t}\r\n    \t}catch(e){ }\r\n    \t\r\n        var div = document.createElement("div");\r\n        div.className = "graphList";\r\n        div.innerHTML = `<button type=\'button\' class=\'btn btn-default graph active\' id=\'bar\' data-toggle=\'tooltip\' data-placement=\'bottom\' title="柱状图"></button>\r\n            <button type=\'button\' class=\'btn btn-default graph\' id=\'bar3d\' data-toggle=\'tooltip\' data-placement=\'bottom\' title="三维柱状图"></button>\r\n            <button type=\'button\' class=\'btn btn-default graph\' id=\'line\' data-toggle=\'tooltip\' data-placement=\'bottom\' title="折线图"></button>\r\n            <button type=\'button\' class=\'btn btn-default graph\' id=\'point\' data-toggle=\'tooltip\' data-placement=\'bottom\' title="点状图"></button>\r\n            <button type=\'button\' class=\'btn btn-default graph\' id=\'pie\' data-toggle=\'tooltip\' data-placement=\'bottom\' title="饼状图"></button>\r\n            <button type=\'button\' class=\'btn btn-default graph\' id=\'circular\' data-toggle=\'tooltip\' data-placement=\'bottom\' title="环状图"></button>`;\r\n        $(".mapboxgl-map").append(div);\r\n        var graphListStyle = document.createElement(\'style\');\r\n        graphListStyle.type = \'text/css\';\r\n        graphListStyle.innerHTML =\r\n            ".graphList{\\n" +\r\n            "    position: absolute;\\n" +\r\n            "    right: 5px;\\n" +\r\n            "    top: 8px;\\n" +\r\n            "    text-align: center;\\n" +\r\n            "    background: #FFF;\\n" +\r\n            "    z-index: 1000;\\n" +\r\n            "    border-radius: 4px;\\n" +\r\n            "}\\n" +\r\n            ".btn{\\n" +\r\n            "    display: inline-block;\\n" +\r\n            "    padding: 6px 12px;\\n" +\r\n            "    margin-bottom: 0;\\n" +\r\n            "    font-size: 14px;\\n" +\r\n            "    font-weight: 400;\\n" +\r\n            "    line-height: 1.42857143;\\n" +\r\n            "    text-align: center;\\n" +\r\n            "    white-space: nowrap;\\n" +\r\n            "    vertical-align: middle;\\n" +\r\n            "    -ms-touch-action: manipulation;\\n" +\r\n            "    touch-action: manipulation;\\n" +\r\n            "    cursor: pointer;\\n" +\r\n            "    -webkit-user-select: none;\\n" +\r\n            "    -moz-user-select: none;\\n" +\r\n            "    -ms-user-select: none;\\n" +\r\n            "    user-select: none;\\n" +\r\n            "    background-image: none;\\n" +\r\n            "    border: 1px solid transparent;\\n" +\r\n            "    border-radius: 4px;\\n" +\r\n            "}\\n" +\r\n            ".btn-default {\\n" +\r\n            "    color: #333;\\n" +\r\n            "    background-color: #fff;\\n" +\r\n            "    border-color: #ccc;\\n" +\r\n            "}\\n" +\r\n            ".graph {\\n" +\r\n            "    margin: 5px;\\n" +\r\n            "    width: 26px;\\n" +\r\n            "    height: 26px;\\n" +\r\n            "    border-radius: 4px;\\n" +\r\n            "    background-size: 100%;\\n" +\r\n            "}\\n" +\r\n            ".btn-default.active, .btn-default:active, .open>.dropdown-toggle.btn-default {\\n" +\r\n            "    color: #333;\\n" +\r\n            "    background-color: #e6e6e6;\\n" +\r\n            "    border-color: #adadad;\\n" +\r\n            "}\\n" +\r\n            "#bar{\\n" +\r\n            "    background-image: url(\\"images/graphTheme/bar.png\\");\\n" +\r\n            "}\\n" +\r\n            "#bar3d{\\n" +\r\n            "     background-image: url(\\"images/graphTheme/3Dbar.png\\");\\n" +\r\n            "}\\n" +\r\n            "#line{\\n" +\r\n            "    background-image: url(\\"images/graphTheme/line.png\\");\\n" +\r\n            "}\\n" +\r\n            "#point{\\n" +\r\n            "    background-image: url(\\"images/graphTheme/point.png\\");\\n" +\r\n            "}\\n" +\r\n            "#pie{\\n" +\r\n            "    background-image: url(\\"images/graphTheme/pie.png\\");\\n" +\r\n            "}\\n" +\r\n            "#circular{\\n" +\r\n            "    background-image: url(\\"images/graphTheme/circular.png\\");\\n" +\r\n            "}\\n" +\r\n            ".graphTheme{\\n" +\r\n            "    margin-top: -60px; z-index:1010; \\n" +\r\n            "}";\r\n        $(\'head\')[0].appendChild(graphListStyle);\r\n    }\r\n    freshCharts (_t) {\r\n        var charts = $(".graphTheme");\r\n        for(var i=0,len = charts.length;i<len;i++){\r\n            var chart = charts[i];\r\n            var a = chart.style.transform.match(/-?\\d+(\\.\\d+)?/g);\r\n            var transform = [parseFloat(a[2]),parseFloat(a[3])];\r\n            var cbounds = [];\r\n            var point0 = {};\r\n            point0.x = transform[0]-_t.width/2;\r\n            point0.y = transform[1]-_t.height/2;\r\n            var point1 = {};\r\n            point1.x = transform[0]+_t.width/2;\r\n            point1.y = transform[1]-_t.height/2;\r\n            var point2 = {};\r\n            point2.x = transform[0]+_t.width/2;\r\n            point2.y = transform[1]+_t.height/2;\r\n            var point3 = {};\r\n            point3.x = transform[0]-_t.width/2;\r\n            point3.y = transform[1]+_t.height/2;\r\n            var point4 = point0;\r\n            cbounds.push(point0,point1,point2,point3,point4);\r\n            chart.bounds = cbounds;\r\n        }\r\n\r\n        for(var length = charts.length,j=length-1;j>= 0;j--){\r\n            var Chart = charts[j];\r\n            var isOL = false;\r\n            for(var k = j-1;k>= 0;k--){\r\n                if(_t.isOverLay(Chart.bounds,charts[k].bounds)){\r\n                    isOL = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(isOL){\r\n                Chart.style.display = "none";\r\n            }else {\r\n                Chart.style.display = "";\r\n            }\r\n        }\r\n        \r\n        this.setVisible(this.visible);\r\n    }\r\n    /**是否被压盖**/\r\n    isOverLay (quadrilateral, quadrilateral2) {\r\n        var quadLen = quadrilateral.length,\r\n            quad2Len = quadrilateral2.length;\r\n        if (quadLen !== 5 || quad2Len !== 5) {\r\n            return null;\r\n        }//不是四边形\r\n\r\n        var OverLap = false;\r\n        //如果两四边形互不包含对方的节点，则两个四边形不相交\r\n        for (var i = 0; i < quadLen; i++) {\r\n            if (this.isPointInPoly(quadrilateral[i], quadrilateral2)) {\r\n                OverLap = true;\r\n                break;\r\n            }\r\n        }\r\n        for (var i = 0; i < quad2Len; i++) {\r\n            if (this.isPointInPoly(quadrilateral2[i], quadrilateral)) {\r\n                OverLap = true;\r\n                break;\r\n            }\r\n        }\r\n        return OverLap;\r\n    }\r\n    isPointInPoly (pt, poly) {\r\n        for (var isIn = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i) {\r\n            ((poly[i].y <= pt.y && pt.y < poly[j].y) || (poly[j].y <= pt.y && pt.y < poly[i].y))\r\n            && (pt.x < (poly[j].x - poly[i].x) * (pt.y - poly[i].y) / (poly[j].y - poly[i].y) + poly[i].x)\r\n            && (isIn = !isIn);\r\n        }\r\n        return isIn;\r\n    }\r\n    createBarOption (opt) {\r\n    \tlet _t = this, xaxis = [], data = [], color = [];\r\n    \t\r\n    \tif(typeof(opt.properties.data)=="string"){\r\n    \t\topt.properties.data = JSON.parse(opt.properties.data);\r\n\t\t}\r\n    \t\r\n    \t// 单柱造数据·~\r\n    \tfor(let i=0; i< opt.properties.data.length; i++){\r\n    \t\tlet tmp = opt.properties.data[0];\r\n    \t\tfor(let item in tmp){\r\n\t    \t\txaxis.push(item);\r\n\t    \t\tdata.push(tmp[item]);\r\n    \t\t}\r\n    \t}\r\n    \t//如果是单柱则\r\n    \tif(data.length==1){\r\n        \tcolor = [this.color[this._index]];\r\n    \t}else{\r\n    \t\tcolor = this.color;\r\n    \t}\r\n    \t\r\n    \t// 处理值域色阶·~\r\n    \tif(this.gradient){\r\n\t    \tlet _datas = [];\r\n\t    \tfor(let item in this.gradient){\r\n\t    \t\t_datas.push({\r\n\t    \t\t\tv : Number(item),\r\n\t    \t\t\tc : this.gradient[item]\r\n\t    \t\t});\r\n\t    \t}\r\n\t    \tfunction sortV(a, b){\r\n\t    \t\treturn a.v - b.v;\r\n\t    \t}\r\n\t    \t_datas.sort(sortV);\r\n\t    \t\r\n\t    \tif(data.length==1){\r\n\t    \t\tlet od = data[0], min = _datas[0].v, max = _datas[_datas.length - 1].v, sec = 0;\r\n\t\t    \t\r\n\t\t    \tfor(let i=0; i<_datas.length; i++){\r\n\t\t    \t\tif(od >= _datas[i].v){\r\n\t\t    \t\t\tsec = i;\r\n\t\t    \t\t}\r\n\t\t    \t}\r\n\t\t    \t\r\n\t\t    \tcolor = [_datas[sec].c];\r\n\t    \t}else{\r\n\t    \t\tcolor = [];\r\n\t    \t\tlet sec = 0;\r\n\t    \t\tfor(let j = 0;j<data.length;j++){\r\n\t    \t\t\tfor (let i =_datas.length-1;i>=0;i--){\r\n\t    \t\t\t\tif(i==0&&data[j]<_datas[0].v){\r\n\t    \t\t\t\t\tcolor.push(_datas[0].c);\r\n\t\t    \t\t\t\tbreak;\r\n\t    \t\t\t\t}\r\n\t\t    \t\t\tif(data[j]>=_datas[i].v){\r\n\t\t    \t\t\t\tcolor.push(_datas[i].c);\r\n\t\t    \t\t\t\tbreak;\r\n\t\t    \t\t\t}\r\n\t\t    \t\t}\r\n\t    \t\t}\r\n\t    \t\t\r\n\t    \t}\r\n\t    \t\r\n    \t}\r\n    \t\r\n    \tlet _opt = this.chartOption.bar;\r\n    \t\r\n    \t//console.log(xaxis);\r\n    \t//console.log(data);\r\n    \t\r\n        var option = {\r\n            color: color,\r\n            //backgroundColor: "#d1eeee",\r\n            tooltip: {\r\n                trigger: \'item\',\r\n                axisPointer : {            // 坐标轴指示器，坐标轴触发有效\r\n                    type : \'shadow\'        // 默认为直线，可选为：\'line\' | \'shadow\'\r\n                },\r\n                formatter: "{a} <br/>{b}: {c}"\r\n            },\r\n            grid:{\r\n                left: 5,\r\n                bottom:24,\r\n                right:2,\r\n                top:24\r\n            },\r\n            xAxis: {\r\n                type: \'category\',\r\n                axisTick: {show: false},\r\n                data: xaxis,//this.axisXLabels,\r\n        \t\taxisLabel: {\r\n\t                textStyle : {\r\n\t                \tcolor : "#fff",\r\n                \t\tfontSize: 12\r\n\t                }\r\n                },\r\n\t\t        axisLine: {\r\n\t\t            show: false\r\n\t\t        }\r\n            },\r\n            yAxis: {\r\n            \tshow : false,\r\n                type: \'value\',\r\n                max : 30000 //todo： 设置最大值\r\n            },\r\n            legend: { show : false },\r\n            series: [\r\n                {\r\n                    name: opt.properties.NAME + this.name,\r\n                    type:\'bar\',\r\n\t\t            label: {\r\n\t\t                normal: {\r\n\t\t                    show: true,\r\n\t\t                    position: \'top\',\r\n\t\t\t                textStyle : {\r\n\t\t\t                \tcolor : "#fff",\r\n\t\t\t                \tfontFamily: "AgencyFBBold",\r\n\t\t                \t\tfontSize: 14\r\n\t\t\t                }\r\n\t\t                }\r\n\t\t            },\r\n                    itemStyle: {\r\n                        normal: {\r\n                            color: function(params) {\r\n                                // build a color map as your need.\r\n                                var colorList = color;\r\n                                return colorList[params.dataIndex]\r\n                            }\r\n                        }\r\n                    },\r\n        \t\t\t//barMaxWidth: 100,\r\n                    data: data//opt.properties.data\r\n                }\r\n            ]\r\n        };\r\n        \r\n        // y轴·~\r\n        try{ $.extend(option.yAxis, _opt.yAxis); }catch(e){}\r\n        // x轴文字·~\r\n        try{ $.extend(option.xAxis.axisLabel.textStyle, _opt.xAxis.axisLabel.textStyle); }catch(e){}\r\n        // 系列数值文字·~ todo：临时解决方案·~\r\n        try{ $.extend(option.series[0].label.normal.textStyle, _opt.series[0].label.normal.textStyle); }catch(e){}\r\n        // 柱图宽度·~\r\n        try{ $.extend(option.series[0].barWidth, _opt.series[0].barWidth); }catch(e){}\r\n        \r\n        try{ $.extend(option.series[0].label.fontWeight, _opt.series[0].label.fontWeight); }catch(e){}\r\n        \r\n        \r\n        return option;\r\n    }\r\n    createBar3DOption (opt,i) {\r\n    \tlet _t = this;\r\n        function getcolor() {\r\n            var index = Math.floor(Math.random()*_t.color.length);\r\n            return _t.color[index]\r\n        }\r\n        let xaxis = [], data = [], color = [];\r\n        \r\n        // 单柱造数据·~\r\n        if(typeof(opt.properties.data)=="string"){\r\n    \t\topt.properties.data = JSON.parse(opt.properties.data);\r\n\t\t}\r\n    \tfor(let i=0; i< opt.properties.data.length; i++){\r\n    \t\tlet tmp = opt.properties.data[0];\r\n    \t\tfor(let item in tmp){\r\n\t    \t\txaxis.push(item);\r\n\t    \t\tdata.push(tmp[item]);\r\n    \t\t}\r\n    \t}\r\n    \t//如果是单柱则\r\n    \tif(data.length==1){\r\n    \t\t//确定当前单柱颜色\r\n            if(this.color.length>0){\r\n            \tif(i>this.color.length-1){\r\n                \tcolor= [this.color[0]];\r\n                }else{\r\n                \tcolor=[this.color[i]];\r\n                }\r\n            }\r\n    \t}else{\r\n    \t\tcolor = this.color;\r\n    \t}\r\n        \r\n        \r\n        if(this.gradient){\r\n\t    \tlet _datas = [];\r\n\t    \tfor(let item in this.gradient){\r\n\t    \t\t_datas.push({\r\n\t    \t\t\tv : Number(item),\r\n\t    \t\t\tc : this.gradient[item]\r\n\t    \t\t});\r\n\t    \t}\r\n\t    \tfunction sortV(a, b){\r\n\t    \t\treturn a.v - b.v;\r\n\t    \t}\r\n\t    \t_datas.sort(sortV);\r\n\t    \tif(data.length==1){\r\n\t    \t\tlet od = data[0], min = _datas[0].v, max = _datas[_datas.length - 1].v, sec = 0;\r\n\t\t    \t\r\n\t\t    \tfor(let i=0; i<_datas.length; i++){\r\n\t\t    \t\tif(od >= _datas[i].v){\r\n\t\t    \t\t\tsec = i;\r\n\t\t    \t\t}\r\n\t\t    \t}\r\n\t\t    \t\r\n\t\t    \tcolor = [_datas[sec].c];\r\n\t    \t}else{\r\n\t    \t\tcolor = [];\r\n\t    \t\tlet sec = 0;\r\n\t    \t\tfor(let j = 0;j<data.length;j++){\r\n\t    \t\t\tlet tmp = null;\r\n\t    \t\t\tfor (let i =_datas.length-1;i>=0;i--){\r\n\t    \t\t\t\tif(i==0&&data[j]<_datas[0].v){\r\n\t    \t\t\t\t\tcolor.push(_datas[0].c);\r\n\t\t    \t\t\t\tbreak;\r\n\t    \t\t\t\t}\r\n\t\t    \t\t\tif(data[j]>=_datas[i].v){\r\n\t\t    \t\t\t\tcolor.push(_datas[i].c);\r\n\t\t    \t\t\t\tbreak;\r\n\t\t    \t\t\t}\r\n\t\t    \t\t}\r\n\t    \t\t}\r\n\t    \t\t\r\n\t    \t}\r\n\t    \t\r\n    \t}\r\n    \t\r\n        //组织series\r\n        let s = null;\r\n        if(data.length==1){\r\n        \ts =[{\r\n                //name: opt.properties.NAME + _t.name,\r\n\t            data:data\r\n            }]\r\n        }else{\r\n        \ts = [{data:[]}];\r\n        \tfor(let k = 0; k<data.length;k++){\r\n        \t\t/*s.push({\r\n        \t\t\tcolor:color[k],\r\n        \t\t\ty:data[k]\r\n        \t\t});*/\r\n        \t\ts[0].data.push({\r\n        \t\t\tcolor:color[k],\r\n        \t\t\ty:data[k]\r\n        \t\t});\r\n        \t}\r\n        }\r\n    \t\r\n        var option = {\r\n            chart: {\r\n                // backgroundColor:\'#d1eeee\',\r\n                backgroundColor:\'rgba(255, 255, 255,0)\',\r\n                type: \'column\',\r\n                margin: 5,\r\n                marginBottom:20,\r\n                marginRight:5,\r\n                marginTop:10,\r\n                options3d: {\r\n                    enabled: true,\r\n                    alpha: 3,\r\n                    beta: 3,\r\n                    depth: 70,\r\n                    viewDistance: 100,\r\n                    frame: {\r\n                        bottom: {\r\n                            size: 10\r\n                        },\r\n                        side: {\r\n                            size: 1,\r\n                            color: \'transparent\'\r\n                        },\r\n                        back: {\r\n                            size: 1,\r\n                            color: \'transparent\'\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            colors:color.length>0?color: \'#7cb5ec\',\r\n            legend:{\r\n                enabled:false\r\n            },\r\n            title: {\r\n                text: null\r\n            },\r\n            credits: {\r\n                enabled:false\r\n            },\r\n            tooltip:{\r\n                enabled:true,\r\n                backgroundColor:\'rgba(0,0,0,0.6)\',\r\n                borderColor:\'rgba(0,0,0,0.6)\',\r\n                shadow:false,\r\n                style:{\r\n                \tcolor:\'#fff\'\r\n                }\r\n            },\r\n//             xAxis:{\r\n//                 visible:false\r\n//             },\r\n            yAxis:{\r\n                visible:false\r\n            },\r\n            plotOptions: {\r\n//                series: {\r\n//                    colorByPoint: true\r\n//                },\r\n                column: {\r\n                    depth: 100,\r\n                    dataLabels: {\r\n                        enabled: true,\r\n                        allowOverlap: true, // 允许数据标签重叠\r\n//                        backgroundColor:\'rgba(255, 255, 255,0)\',\r\n//                        overflow:\'none\',\r\n//                        crop:false,\r\n                        style:{\r\n\t\t                \t"color": "#fff", \r\n\t\t                \t"fontSize": "11px", \r\n\t\t                \t//"fontWeight": "bold", \r\n\t\t                \t//"textOutline": "1px 1px contrast" \r\n\t\t                }\r\n                    },\r\n                    //shadow:true\r\n                }\r\n            },\r\n            // plotOptions: {\r\n            //     column: {\r\n            //         depth: 50\r\n            //     }\r\n            // },\r\n            xAxis: {\r\n                gridLineColor:\'rgba(255, 255, 255,0)\',\r\n                categories: xaxis,//_t.axisXLabels,\r\n                labels:{\r\n                    enabled:true,\r\n                    style:{ \r\n                    \t"color": "#fff",\r\n                    \t"cursor": "default", \r\n                    \t"fontSize": "16px" \r\n                    }\r\n                }\r\n            },\r\n            // yAxis: {\r\n            //     gridLineColor:\'#222523\',\r\n            //     tickAmount:5,\r\n            //     title: {\r\n            //         text: null\r\n            //     }\r\n            // },\r\n            zAxis: {\r\n                tickAmount:5,\r\n                gridLineColor:\'#222523\'\r\n            },\r\n            series:s /*[{\r\n                name: opt.properties.NAME + _t.name,\r\n                //data: opt.properties.data2\r\n\t            data:data//[[opt.properties.NAME,opt.properties.data2[0][opt.properties.NAME]]]    \r\n            }]*/\r\n        };\r\n        let _opt = this.chartOption.bar3d;\r\n        try{ $.extend(option.plotOptions.column, _opt.plotOptions); }catch(e){}\r\n        try{ $.extend(option.chart.options3d.depth, _opt.chart.options3d.depth); }catch(e){}\r\n        try{ $.extend(option.xAxis.labels, _opt.xAxis.labels); }catch(e){}\r\n        return option;\r\n    }\r\n    createLineOption (opt) {\r\n    \tlet _t = this;\r\n        var option = {\r\n            color:this.color,\r\n            backgroundColor: "#d1eeee",\r\n            grid:{\r\n                left:"20%",\r\n                bottom:20,\r\n                right:5,\r\n                top:10\r\n            },\r\n            tooltip: {\r\n                trigger: \'axis\',\r\n                formatter: "{a} <br/>{b}: {c}"\r\n            },\r\n            xAxis: {\r\n                type: \'category\',\r\n                data: this.axisXLabels\r\n            },\r\n            yAxis: {\r\n                type: \'value\'\r\n            },\r\n            series: [{\r\n                name: opt.properties.NAME + this.name,\r\n                data: opt.properties.data,\r\n                itemStyle: {\r\n                    normal: {\r\n                        color: function(params) {\r\n                            // build a color map as your need.\r\n                            var colorList = _t.color;\r\n                            return colorList[params.dataIndex]\r\n                        }\r\n                    }\r\n                },\r\n                lineStyle:{\r\n                    color:"#64ff40"\r\n                },\r\n                symbolSize:10,\r\n                type: \'line\'\r\n            }]\r\n        };\r\n        return option;\r\n    }\r\n    createPointOption (opt) {\r\n    \tlet _t = this;\r\n        var option = {\r\n            color:this.color,\r\n            backgroundColor: "#d1eeee",\r\n            tooltip: {\r\n                trigger: \'item\',\r\n                axisPointer : {            // 坐标轴指示器，坐标轴触发有效\r\n                    type : \'shadow\'        // 默认为直线，可选为：\'line\' | \'shadow\'\r\n                },\r\n                formatter: "{a} <br/>{b}: {c}"\r\n            },\r\n            grid:{\r\n                left:"20%",\r\n                bottom:20,\r\n                right:5,\r\n                top:10\r\n            },\r\n            xAxis: {\r\n                type: \'category\',\r\n                axisTick: {show: false},\r\n                data: this.axisXLabels\r\n            },\r\n            yAxis: {\r\n                type: \'value\'\r\n            },\r\n            legend: { show : false },\r\n            series: [{\r\n                name: opt.properties.NAME + this.name,\r\n                symbolSize: 20,\r\n                data: opt.properties.data3,\r\n                itemStyle: {\r\n                    normal: {\r\n                        color: function(params) {\r\n                            // build a color map as your need.\r\n                            var colorList = _t.color;\r\n                            return colorList[params.dataIndex]\r\n                        }\r\n                    }\r\n                },\r\n                type: \'scatter\'\r\n            }]\r\n        };\r\n        return option;\r\n    }\r\n    createPieOption (opt) {\r\n    \tlet _t = this;\r\n        var option = {\r\n            color:this.color,\r\n            backgroundColor: "rgba(209,238,238,0)",\r\n            grid:{\r\n                left:5,\r\n                bottom:20,\r\n                right:5,\r\n                top:10\r\n            },\r\n            tooltip : {\r\n                trigger: \'item\',\r\n                formatter: "{a} <br/>{b} : {c} ({d}%)"\r\n            },\r\n            legend: {\r\n                show:false,\r\n                orient: \'vertical\',\r\n                x: \'right\',\r\n                data: this.axisXLabels\r\n            },\r\n            series : [\r\n                {\r\n                    name: opt.properties.NAME + this.name,\r\n                    type: \'pie\',\r\n                    radius : \'70%\',\r\n                    center: [\'50%\', \'50%\'],\r\n                    data:opt.properties.data4,\r\n                    itemStyle: {\r\n                        emphasis: {\r\n                            shadowBlur: 10,\r\n                            shadowOffsetX: 0,\r\n                            shadowColor: \'rgba(0, 0, 0, 0.5)\'\r\n                        }\r\n                    },\r\n                    label:{\r\n                        show: false\r\n                    },\r\n                    labelLine: {\r\n                        normal: {\r\n                            show: false\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n        return option;\r\n    }\r\n    createCircularOption (opt) {\r\n    \tlet _t = this;\r\n        var option = {\r\n            color:this.color,\r\n            backgroundColor: "rgba(209,238,238,0)",\r\n            grid:{\r\n                left:5,\r\n                bottom:20,\r\n                right:5,\r\n                top:10\r\n            },\r\n            tooltip : {\r\n                trigger: \'item\',\r\n                formatter: "{a} <br/>{b} : {c} ({d}%)"\r\n            },\r\n            legend: {\r\n                show:false,\r\n                orient: \'vertical\',\r\n                x: \'right\',\r\n                data: this.axisXLabels\r\n            },\r\n            series : [\r\n                {\r\n                    name: opt.properties.NAME + this.name,\r\n                    type: \'pie\',\r\n                    center: [\'50%\', \'50%\'],\r\n                    radius: [\'40%\', \'70%\'],\r\n                    avoidLabelOverlap: false,\r\n                    label: {\r\n                        normal: {\r\n                            show: false,\r\n                            position: \'center\'\r\n                        },\r\n                        emphasis: {\r\n                            show: false\r\n                        }\r\n                    },\r\n                    labelLine: {\r\n                        normal: {\r\n                            show: false\r\n                        }\r\n                    },\r\n                    data:opt.properties.data5\r\n                }\r\n            ]\r\n        };\r\n        return option;\r\n    }\r\n    addLegend () {\r\n        var _t = this;\r\n        function LegendControl() {}\r\n        /*** 添加图例操作 ***/\r\n        LegendControl.prototype.onAdd = function () {\r\n            this.legend_container = document.createElement("div");\r\n            var orientation = "legend-vertical";\r\n            this.legend_container.className = "legend " + orientation;\r\n            var titleElement = "<div class=\'legend-title\'>图例</div>";\r\n            var content = "";\r\n            _t.axisXLabels.forEach(function (value,i) {\r\n                content += `<li><span style=\'background-color:${_t.color[i]};\'></span><span>${value}</span></li>`;\r\n            });\r\n            var contentElement = `<div class=\'legend-content\'>${content}</div>`;\r\n            this.legend_container.innerHTML = titleElement + contentElement;\r\n\r\n            return this.legend_container;\r\n        };\r\n        LegendControl.prototype.onRemove = function () {\r\n            this.legend_container.parentNode.removeChild(this.legend_container);\r\n        };\r\n        var legendStyle = document.createElement(\'style\');\r\n        legendStyle.type = \'text/css\';\r\n        legendStyle.innerHTML =\r\n            "       .legend {\\n" +\r\n            "            display: inline-block;\\n" +\r\n            "            border-radius: 2px;\\n" +\r\n            "            margin-bottom: 5px;\\n" +\r\n            "            margin-right: 5px;" +\r\n            "            font-size: 12px;\\n" +\r\n            "            color: rgba(0, 0, 0, 0.8);\\n" +\r\n            "            background-color: rgb(255, 255, 255);\\n" +\r\n            "        }\\n" +\r\n            "        .legend .legend-title {\\n" +\r\n            "            min-height: 14px;\\n" +\r\n            "            max-width: 500px;\\n" +\r\n            "            padding:6px 10px;\\n" +\r\n            "        }\\n" +\r\n            "        .legend-content{\\n" +\r\n            "            padding:6px 10px;\\n" +\r\n            "        }" +\r\n            "       .legend ul {\\n" +\r\n            "            padding: 0;\\n" +\r\n            "            margin: 0 16px;\\n" +\r\n            "            height: 100%;\\n" +\r\n            "            display: block;\\n" +\r\n            "            list-style: none;\\n" +\r\n            "        }\\n" +\r\n            "        .legend li {\\n" +\r\n            "            vertical-align: middle;\\n" +\r\n            "            list-style-type:none;" +\r\n            "        }\\n" +\r\n            "        .legend li span:first-child {\\n" +\r\n            "            vertical-align: middle;\\n" +\r\n            "        }\\n" +\r\n            "        .legend li span:last-child {\\n" +\r\n            "            line-height: 28px;\\n" +\r\n            "            max-width: 200px;\\n" +\r\n            "            vertical-align: middle;\\n" +\r\n            "            white-space: nowrap;\\n" +\r\n            "            overflow: hidden;\\n" +\r\n            "            text-overflow: ellipsis;\\n" +\r\n            "            -ms-text-overflow: ellipsis;\\n" +\r\n            "        }\\n" +\r\n            "       .legend-vertical li {\\n" +\r\n            "            height: 28px;\\n" +\r\n            "        }\\n" +\r\n            "        .legend-vertical li span:first-child {\\n" +\r\n            "            display: inline-block;\\n" +\r\n            "            width: 60px;\\n" +\r\n            "            height: 100%;\\n" +\r\n            "        }\\n" +\r\n            "        .legend-vertical li span:last-child {\\n" +\r\n            "            display: inline-block;\\n" +\r\n            "            margin-left: 16px;\\n" +\r\n            "            height: 100%;\\n" +\r\n            "        }";\r\n        $(\'head\')[0].appendChild(legendStyle);\r\n        _t.legendControl = new LegendControl();\r\n        this.map.addControl(_t.legendControl,"bottom-right")\r\n    }\r\n};\r\n\r\n/* harmony default export */ var layer_StatisticalChart = (StatisticalChart_StatisticalChart);\n// CONCATENATED MODULE: ./src/modules/layer/Heatmap.js\n\r\n\r\n//import * as mapv from \'mapv\';\r\n\r\n/**\r\n * @author wf\r\n * @alias je.x.layer.Heatmap\r\n * @class\r\n * @extends je.x.layer.Base\r\n * @classdesc 热力图图层 \r\n * <p>通过配置实例化一个热力图图层，加载到地图上显示</p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass Heatmap_Heatmap extends layer_MapV /** @lends je.x.layer.Heatmap.prototype */{\r\n\t\r\n\tconstructor(option){\r\n\t\tsuper(option);\r\n\t\t\r\n\t\tthis.visible = true;\r\n\t\tthis.opacity = 0.8;\r\n\t\tthis.radius = 13;\r\n\t\tthis.gradient = {\r\n\t\t\t0.25: "rgb(0,0,255)", \r\n\t\t\t0.55: "rgb(0,255,0)", \r\n\t\t\t0.85: "yellow", \r\n\t\t\t1.0: "rgb(255,0,0)"\r\n\t\t};\r\n\t\t\r\n\t\t$.extend(this, option);\r\n\t\t\r\n\t\tthis.EVENT_TYPES = ["click"];\r\n\t\t\r\n\t\tthis.CLASS_NAME = "x.layer.Heatmap";\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 渲设置显示隐藏\r\n\t * */\r\n\tsetVisible(f){\r\n\t\tsuper.setVisible(f);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 销毁图层\r\n\t * */\r\n\tdestroy(opt){\r\n\t\tsuper.destroy(opt);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 渲染图层\r\n\t * */\r\n\trender(opt){\r\n\t\tlet _t = this;\r\n\t\tthis.source.getData((result) => {\r\n\t\t\tlet data = [];\r\n\t\t\tresult.features.forEach((value) => {\r\n\t\t\t\tdata.push({\r\n\t                geometry: value.geometry,\r\n\t                // 取配置的第一个对应的属性值·~\r\n\t                count: value.properties[_t.source.columns[0]]\r\n\t            });\r\n\t\t\t});\r\n\t\t\tlet dataSet = new mapv.DataSet(data);\r\n\t\t\tlet options = {\r\n\t            size: _t.radius,\r\n\t            maxOpacity : _t.opacity,\r\n\t            gradient: _t.gradient,\r\n\t            max: 50,\r\n\t            draw: \'heatmap\'\r\n\t        }\r\n\t        _t.datasets = [dataSet];\r\n\t        _t.mapVOptions = [options];\r\n\t        // 使用基类渲染方法·~\r\n\t        super.render(opt);\r\n\t        \r\n\t        // todo: 模拟一个矢量图层让其可以被点击`~\r\n\t        let layer = {\r\n\t\t\t\tid : "je-heatmap-" + _t._id,\r\n\t\t\t\ttype:"circle",\r\n\t\t\t\tsource : {\r\n\t\t\t\t\t"type" : "geojson",\r\n\t\t\t\t\t"data" : result\r\n\t\t\t\t},\r\n\t\t\t\tpaint:{\r\n\t\t\t\t\t\'circle-color\': "#000",\r\n\t\t            \'circle-radius\': 5,\r\n\t\t            \'circle-opacity\' : 0\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t_t.map.addLayer(layer);\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t_t._maptalksEle.getElMap().on("click", function(e){\r\n\t\t\t\tconsole.log(e);\r\n\t\t\t});\r\n\t\t\t*/\r\n\t\t\t\r\n\t        _t.map.on("click", function(e){\r\n\t        \tvar features = _t.map.queryRenderedFeatures(e.point, { layers: ["je-heatmap-" + _t._id] });\r\n\t\t\t\tvar feature = features[0];\r\n\t\t\t\tif(feature){\r\n\t\t\t\t\t_t.trigger("click", feature);\r\n\t\t\t\t}\r\n\t        });\t        \r\n\t        _t.setVisible(_t.visible);\r\n\t         \r\n\t\t});\r\n\t\treturn;\r\n\t\t\r\n\t\t// todo: mapboxgl v0.40.1没有heatmap，40+才有·· \r\n\t\tlet heatmap_color = [\r\n\t                "interpolate",\r\n\t                ["linear"],\r\n\t                ["heatmap-density"]\r\n\t            ];\r\n\t\tlet key_sort = [];\r\n\t\tfor(let item in _t.gradient){\r\n\t\t\tkey_sort.push(item);\r\n\t\t}\r\n\t\tkey_sort = key_sort.sort();\r\n\t\tfor(let item in key_sort){\r\n\t\t\tkey_sort.push(item);\r\n\t\t\theatmap_color.push(Number(key_sort[item]));\r\n\t\t\theatmap_color.push(_t.gradient[key_sort[item]]);\r\n\t\t}\r\n\t\t\r\n\t\tconsole.log(heatmap_color);\r\n\t\tlet layer_ = {\r\n\t\t\tid : "je-heatmap",\r\n\t\t\ttype : "heatmap",\r\n\t\t\tsource : "heatmap",\r\n\t\t\t"paint": {\r\n\t            // Increase the heatmap weight based on frequency and property magnitude\r\n\t            "heatmap-weight": [\r\n\t                "interpolate",\r\n\t                ["linear"],\r\n\t                ["get", _t.source.columns[0]],\r\n\t                0, 0,\r\n\t                6, 1\r\n\t            ],\r\n\t            // Increase the heatmap color weight weight by zoom level\r\n\t            // heatmap-intensity is a multiplier on top of heatmap-weight\r\n\t            /*\r\n\t            "heatmap-intensity": [\r\n\t                "interpolate",\r\n\t                ["linear"],\r\n\t                ["zoom"],\r\n\t                0, 1,\r\n\t                9, 3\r\n\t            ],*/\r\n\t            // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\r\n\t            // Begin color ramp at 0-stop with a 0-transparancy color\r\n\t            // to create a blur-like effect.\r\n\t            "heatmap-color": heatmap_color,\r\n\t            // Adjust the heatmap radius by zoom level\r\n\t            /*\r\n\t            "heatmap-radius": [\r\n\t                "interpolate",\r\n\t                ["linear"],\r\n\t                ["zoom"],\r\n\t                0, 2,\r\n\t                9, 20\r\n\t            ],*/\r\n\t            // Transition from heatmap to circle layer by zoom level\r\n\t            /*\r\n\t            "heatmap-opacity": [\r\n\t                "interpolate",\r\n\t                ["linear"],\r\n\t                ["zoom"],\r\n\t                7, 1,\r\n\t                9, 0\r\n\t            ],\r\n\t            */\r\n\t        }\r\n\t\t};\r\n\t\t\r\n\t\t\t_t.map.addSource(\'heatmap\', {\r\n\t\t        "type": "geojson",\r\n\t\t        "data": result\r\n\t\t    });\r\n\t\t\t_t.map.addLayer(layer_);\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n};\r\n\r\n/* harmony default export */ var layer_Heatmap = (Heatmap_Heatmap);\n// CONCATENATED MODULE: ./src/modules/layer/Migrate.js\n\r\n//import eCharts from "echarts";\r\n//import EchartsLayer from \'echartslayer\';\r\n\r\n/**\r\n * 基于Echarts的迁徙图\r\n * @param [Array] data  路径参数\r\n * eg:\r\n * var data = [\r\n * \t{\r\n *    \tfrom : { lng: 114.3896, lat: 30.6628, text : "起点1" },\r\n *    \tto   : { lng: 113877.855, lat: 19152.874, text : "终点0" }\r\n * \t}\r\n * ];\r\n * @param {Object} Moption 样式参数\r\n * eg:\r\n * var Moption = { routeColor:"#00FF00",\r\n *\t\trouteWidth:"0.5",\t\t\t\t\t//飞行路径宽度\r\n *\t\tspeed:6,\t\t\t\t\t\t\t//飞行速度，越大越慢\r\n *\t\tflightSize:15,\t\t\t\t\t\t//飞行器大小\r\n *\t\tflightColor:"#66FF00",\t\t\t\t//飞行器颜色\r\n *\t\tflightStyle:"",\t\t\t\t\t\t//飞行器样式\r\n *\t\tfromPointColor:"#FFD700",\t\t\t//起点颜色\r\n *      fromPointSize:12,\t\t\t\t\t//起点大小\r\n *\t\ttoPointColor:"#00BFFF",\t\t\t\t//终点颜色\r\n *\t\ttoPointSize:12 };\t\t\t\t\t//终点大小\r\n */\r\nclass Migrate_Migrate extends layer_Base /** @lends je.x.layer.Migrate.prototype */{\r\n\r\n    constructor(option) {\r\n\t\tsuper(option);\r\n\r\n    \tthis.data = null;\r\n    \tthis.Moption = {\r\n\t\t\trouteColor:"#04a2f6",\r\n\t\t\trouteWidth: 0.4,\r\n\t\t\tspeed:6,\r\n\t\t\tflightSize:15,\r\n\t\t\tflightColor:"#04a2f6",\r\n\t\t\tfromPointColor:"#ff4754",\r\n\t\t\tfromPointSize:16,\r\n\t\t\ttoPointColor:"#ffa535",\r\n\t\t\ttoPointSize:16\r\n    \t};\r\n    \tthis.series = [];\r\n    \tthis.res = null;\r\n\t\tthis.EVENT_TYPES = ["point_click"];\r\n\t\t\r\n        $.extend(this.Moption, option.Moption);\r\n        \r\n        let o = this.Moption;\r\n        \r\n        this.RouteOption = {\r\n            name: "线路",       //目标路线设置\r\n            type: \'lines\',                  //\r\n            coordinateSystem: \'GLMap\',\r\n            zlevel: 1,\r\n            effect: {\r\n                show: true,\r\n                period: o.speed,\r\n                trailLength: 0.7,\r\n                color: \'#fff\',\r\n                symbolSize: 4\r\n            },\r\n            lineStyle: {\r\n                normal: {\r\n                    color: o.routeColor,\r\n                    width: o.routeWidth,\r\n                    curveness: 0.2\r\n                }\r\n            },\r\n        };\r\n        this.FlyOption = {\r\n            name: "飞行器线路",\r\n            coordinateSystem: \'GLMap\',\r\n            type: \'lines\',\r\n            zlevel: 2,\r\n            symbol: [\'none\', \'arrow\'],\r\n            symbolSize: 10,\r\n            effect: {\r\n                show: true,\r\n                period: o.speed,\r\n                trailLength: 0,\r\n                symbol: "path://M1705.06,1318.313v-89.254l-319.9-221.799l0.073-208.063c0.521-84.662-26.629-121.796-63.961-121.491c-37.332-0.305-64.482,36.829-63.961,121.491l0.073,208.063l-319.9,221.799v89.254l330.343-157.288l12.238,241.308l-134.449,92.931l0.531,42.034l175.125-42.917l175.125,42.917l0.531-42.034l-134.449-92.931l12.238-241.308L1705.06,1318.313z",\r\n                symbolSize: o.flightSize\r\n            },\r\n            lineStyle: {\r\n                normal: {\r\n                    color: o.flightColor,\r\n                    width: 0,\r\n                    opacity: 0.5,\r\n                    curveness: 0.2\r\n                }\r\n            },\r\n        };\r\n        this.FromPointOption = {\r\n            name: "起点",\r\n            type: \'effectScatter\',\r\n            coordinateSystem: \'GLMap\',\r\n            zlevel: 2,\r\n            rippleEffect: {\r\n                brushType: \'stroke\'\r\n            },\r\n            label: {\r\n                normal: {\r\n                    show: false,\r\n                    position: \'right\',\r\n                    formatter: \'{b}\'\r\n                }\r\n            },\r\n            symbolSize: o.fromPointSize,\r\n            itemStyle: {\r\n                normal: {\r\n                    color: o.fromPointColor\r\n                }\r\n            }\r\n        };\r\n        this.ToPointOption = {\r\n            name: "终点",\r\n            type: \'effectScatter\',\r\n            coordinateSystem: \'GLMap\',\r\n            zlevel: 2,\r\n            rippleEffect: {\r\n                brushType: \'stroke\'\r\n            },\r\n            label: {\r\n                normal: {\r\n                    show: false,\r\n                    position: \'right\',\r\n                    formatter: \'{b}\'\r\n                }\r\n            },\r\n            symbolSize: o.toPointSize,\r\n            itemStyle: {\r\n                normal: {\r\n                    color: o.toPointColor\r\n                }\r\n            }\r\n        };\r\n    }\r\n    \r\n    /**\r\n\t * @methd\r\n\t * @desc 设置显示隐藏\r\n\t * */\r\n\tsetVisible (f){\r\n\t\t//todo 隐藏echarts layer页面容器 ~~\r\n\t\tlet div = this.echartslayer._container; \r\n\t\tif(f){\r\n\t\t\t$(div).show();\r\n\t\t\tthis.visible = true;\r\n\t\t}else{\r\n\t\t\t$(div).hide();\r\n\t\t\tthis.visible = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 销毁图层\r\n\t * */\r\n    destroy(){\r\n        this.echartslayer.remove();\r\n    }\r\n    \r\n    /**\r\n\t * @methd\r\n\t * @desc 渲染图层\r\n\t * */\r\n    render(){\r\n    \tlet _t = this;\r\n\t\tthis.source.getData((result) => {\r\n\t\t\tlet data = [], i = 1;\r\n\t\t\tresult.features.forEach((value) => {\r\n\t\t\t\tlet fromCenter = { lng: value.geometry.coordinates[0], lat: value.geometry.coordinates[1], text : "起点-" + i };\r\n\t\t\t\tlet arr = value.properties[_t.source.columns[0]];\r\n\t\t\t\tif(typeof(arr)=="string"){\r\n\t\t\t\t\tarr = JSON.parse(arr);\r\n\t\t\t\t}\r\n\t\t\t\tarr.forEach((v) => {\r\n\t\t\t\t\t\r\n\t\t\t\t\tdata.push({\r\n\t\t\t\t\t\tfrom : fromCenter,\r\n\t\t\t\t\t\tto   : { lng:v[0], lat: v[1], text : "终点-" + i }\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\ti++;\t\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t            i++;\r\n\t\t\t});\r\n\t\t\t_t.data = data;\r\n\t\t\t\r\n\t        _t.convertData(_t.data);\r\n\t        var option = _t.setOption();\r\n\t        //console.log(option);\r\n\t        _t.echartslayer = new EchartsLayer(_t.map);\r\n\t        _t.echartslayer.chart.setOption(option);\r\n\t        _t.echartslayer.chart.on("click", function(e){\r\n\t        \t// 点击的是点·~\r\n\t        \tif(e.seriesType == "effectScatter"){\r\n\t        \t\t_t.trigger("point_click", e);\r\n\t        \t}\r\n\t        });\r\n        \r\n\t\t});\r\n    \t\r\n    }\r\n        \r\n    convertData(data) {\r\n        var that = this;\r\n        var res = [], points = [];\r\n        for (var i = 0; i < data.length; i++) {\r\n            var dataItem = data[i];\r\n            var fromCoord = [parseFloat(data[i].from.lng),parseFloat(data[i].from.lat)];\r\n            var toCoord = [parseFloat(data[i].to.lng),parseFloat(data[i].to.lat)];\r\n            if (fromCoord && toCoord) {\r\n                res.push({\r\n                    coords: [fromCoord, toCoord]\r\n                });\r\n            }\r\n        }\r\n        that.res = res;\r\n        return res;\r\n    }\r\n    \r\n    makeSeries(data) {\r\n        var that  = this ;\r\n        var series = [];\r\n        var fromPoint = [];\r\n        that.RouteOption.data = that.res;\r\n        that.FlyOption.data = that.res;\r\n        that.data.forEach(function (item, i) {\r\n            var dele_option = $.extend({},that.ToPointOption);\r\n            dele_option.data = [that.setPoint(item)];\r\n            series.push(that.RouteOption,that.FlyOption,dele_option)\r\n            if(fromPoint.length == 0){\r\n                fromPoint.push(item.from)\r\n            }else{\r\n                var flag = false;\r\n                fromPoint.forEach(function(point){\r\n                    if(point.text == item.from.text){\r\n                        flag = true;\r\n                    }\r\n                });\r\n                if(!flag){\r\n                    fromPoint.push(item.from);\r\n                }\r\n            }\r\n        });\r\n        var arr = [];\r\n        fromPoint.forEach(function(point){\r\n            var fromdata = {\r\n                name:point.text,\r\n                value:[point.lng,point.lat,95]\r\n            };\r\n           arr.push(fromdata);\r\n        });\r\n        that.FromPointOption.data = arr;\r\n        series.push(that.FromPointOption);\r\n        return series;\r\n    }\r\n    \r\n    setOption() {\r\n        var that = this;\r\n        var option = {\r\n            GLMap:{\r\n            },\r\n            coordinateSystem: \'GLMap\',\r\n            title: {                //标题\r\n            },\r\n            legend: {\r\n            },\r\n            geo: {\r\n                map: \'GLMap\',\r\n                label: {\r\n                    emphasis: {\r\n                        show: true\r\n                    }\r\n                },\r\n                roam: true,\r\n                itemStyle: {\r\n                    normal: {\r\n                        areaColor: \'#323c48\',\r\n                        borderColor: \'#404a59\'\r\n                    },\r\n                    emphasis: {                 //鼠标经过时的样式\r\n                        areaColor: \'#2a333d\'\r\n                    }\r\n                }\r\n            },\r\n            series: that.makeSeries(that.data)\r\n        }\r\n        return option;\r\n    }\r\n    \r\n    setPoint(item) {\r\n        var toInfo = item.to;\r\n        return {\r\n            name: toInfo.text,\r\n            value: [toInfo.lng,toInfo.lat,95]\r\n        }\r\n    }\r\n    \r\n};\r\n\r\n/* harmony default export */ var layer_Migrate = (Migrate_Migrate);\n// CONCATENATED MODULE: ./src/modules/layer/Visuals.js\n\r\n\r\n/**\r\n * @author wf\r\n * @alias je.x.layer.Visuals\r\n * @class\r\n * @extends je.x.layer.Base\r\n * @classdesc GeoGlobe提供的视觉图层 \r\n * <p></p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass Visuals_Visuals extends layer_Base /** @lends je.x.layer.Visuals.prototype */{\r\n\r\n\tconstructor (option){\r\n\t\tsuper(option);\r\n\t\t//this.type = "Custom.Bubble";\r\n\t\t\r\n\t\tthis.globeVisualsObject = null;\r\n\t\tthis.div = null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 设置显示隐藏\r\n\t * */\r\n\tsetVisible (f){\r\n\t\tlet div = this.div;\r\n\t\tif(f){\r\n\t\t\t$(div).show();\r\n\t\t\tthis.visible = true;\r\n\t\t}else{\r\n\t\t\t$(div).hide();\r\n\t\t\tthis.visible = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 销毁图层\r\n\t * */\r\n\tdestroy (opt){\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * @methd\r\n\t * @desc 渲染图层\r\n\t * */\r\n\trender (opt){\r\n\t\tif(this.renderer == "custom"){\r\n\t\t\tthis.render_custom(opt);\r\n\t\t}else if(this.renderer == "deckgl"){\r\n\t\t\tthis.render_deckgl(opt);\r\n\t\t}\r\n\t}\r\n\t\r\n\trender_custom(opt){\r\n\t\tlet _t = this;\r\n\t\t//构造可视化定制图层\r\n\t    var custom = new GeoGlobe.Visuals.Custom();\r\n\t    //绑定鼠标点击事件\r\n\t    custom.on(\'overlayerclick\', function(e){\r\n\t        //console.info(e);\r\n\t    });\r\n\t    //绑定鼠标移动事件\r\n\t    custom.on(\'overlayerhover\', function(e){\r\n\t        //console.info(e);\r\n\t    });\r\n\t    //添加到地图中\r\n\t    custom.addTo(this.map);\r\n\t    \r\n\t\tvar bubble = new GeoGlobe.Visuals.Custom.Bubble({\r\n\t        id: this.id + "-bubble",\r\n\t        visibility: true,\r\n\t        dragdrawing: true,\r\n\t        data: [],\r\n\t        rendererOptions: {\r\n\t            "markPoint": {\r\n\t\t\t\t    "hoverable": false,\r\n\t\t\t\t    "symbol": "sprite",\r\n\t\t\t\t    "symbolMinSize": 6,\r\n\t\t\t\t    "symbolMaxSize": 20,\r\n\t\t\t\t    "effect": {\r\n\t\t\t\t        "show": false,\r\n\t\t\t\t        "scaleSize": 1,\r\n\t\t\t\t        "period": 10\r\n\t\t\t\t    },\r\n\t\t\t\t    "itemStyle": {\r\n\t\t\t\t        "color": "rgba(255, 122, 20, 1)"\r\n\t\t\t\t    },\r\n\t\t\t\t    "label": {\r\n\t\t\t\t        "show": false\r\n\t\t\t\t    }\r\n\t\t\t\t},\r\n\t\t\t\t"tooltip": {\r\n\t\t\t\t    "show": false\r\n\t\t\t\t}\r\n\t        }\r\n\t    });\r\n\t    \r\n\t    //console.log(custom);\r\n\t    //console.log(bubble);\r\n\t    this.globeVisualsObject = bubble;\r\n\t    \r\n\t    //添加到可视化定制图层\r\n\t    bubble.addTo(custom);\r\n\t    //绘制\r\n\t    custom.render();\r\n\t    //设置代理地址\r\n\t    GeoGlobe.ProxyHost = gmapx.PROXY_URL;\r\n\t    //构造实时数据源对象\r\n\t    var rtds = new GeoGlobe.Service.RTDS(\'实时数据服务\', this.source.url,{\r\n\t    \tversion: \'1.0.0\',\r\n\t    \tformat: \'json\'\r\n\t    });\r\n\t    \r\n\t\tthis.div = this.globeVisualsObject._parent.container;\r\n\t    \r\n\t    this.source.on("dataupdate", function(result){\r\n\t    \t//console.log(result);\r\n\t    \tfor(let i=0; i < result.features.length; i++){\r\n\t    \t\tvar p = result.features[i].properties;\r\n\t    \t\tp.name = p.ID;\r\n\t    \t\tp.value = p[_t.source.columns[0]];\r\n\t    \t}\r\n\t\t\tbubble.setData(result.features);\r\n\t\t\tcustom.render();\r\n\t    });\r\n\t    this.source.getData({\r\n\t    \tstartposition : 1,\r\n\t    \tmaxcount : 50000\r\n\t    },function(){});\r\n\t}\r\n\t\r\n\trender_deckgl(opt){\r\n\t\tlet map = this.map, _t = this;\r\n\t\t//构造DeckGL可视化图层\r\n\t    var deckgl = new GeoGlobe.Visuals.DeckGL();\r\n\t    //绑定初始构建事件\r\n\t    deckgl.on(\'overlayerinit\', function(o){\r\n\t    \to.param.blendEquation(o.param.FUNC_ADD);\r\n  \t\t\t\to.param.blendFunc(o.param.SRC_ALPHA, o.param.ONE);\r\n\t    });\r\n  \t\t    //绑定鼠标点击事件\r\n\t    deckgl.on(\'overlayerclick\', function(e,a,b){\r\n\t    \r\n\t    });\r\n\t    //绑定鼠标移动事件\r\n\t    deckgl.on(\'overlayerhover\', function(o,a,b){\r\n\r\n\t    })\r\n\t    //添加到地图中\r\n\t    deckgl.addTo(map);\r\n\t    //构造散点图层\r\n\t    var option = {\r\n\t    \tid: \'scatterplot-layer\',\r\n\t\t\tdata: [\r\n\t\t\t\t{ "type": "Feature", "properties": { "id": 10001, "name": "散点1" }, "geometry": { "type": "Point", "coordinates": [114.20257245367856, 30.773372078561778] } }\r\n\t\t\t],\r\n\t\t\tvisible: true,\r\n\t\t\tpickable: true,\r\n\t\t\tfp64: false,\r\n\t\t\topacity: 1,\r\n\t\t\tradiusScale: 1000,\r\n\t\t\toutline: false,\r\n\t\t\tstrokeWidth: 1,\r\n\t\t\tradiusMinPixels: 2,\r\n\t\t\tradiusMaxPixels: 2,\r\n\t\t\tgetColor: function(d){if(d.properties.T==2||d.properties.T==4){return [255,10,10,100];}else{return [10, 10, 255, 10];}},\r\n\t\t\tgetRadius: function(d){if(d.properties.T==2||d.properties.T==4){return 1;}else{return 1;}}\r\n\t    };\r\n\t    $.extend(option, _t.deckgl);\r\n\t    var scatterplotLayer = new GeoGlobe.Visuals.DeckGL.ScatterplotLayer(option);\r\n\t    //添加到DeckGL图层\r\n\t    scatterplotLayer.addTo(deckgl);\r\n \t\t    //绘制\r\n\t    deckgl.render();\r\n\t    \r\n\t\tthis.div = deckgl.container;\r\n\t    \r\n\t    this.source.getData({\r\n\t    \tstartposition : 1,\r\n\t    \tmaxcount : 50000\r\n\t    },function(result){\r\n\t    \t//转换数据格式\r\n\t        var data = [];\r\n\t        //console.log(result.features);\r\n\t        for (var i = 0; i < result.features.length; i++) {\r\n\t        \tvar coord = result.features[i].geometry.coordinates;\r\n\t        \tvar T = result.features[i].properties[_t.source.columns[0]];\r\n\t            var featrue = {\r\n\t                "type": "Feature",\r\n\t                "properties": {\r\n\t                    "id": i,\r\n\t                    "T": T\r\n\t                },\r\n\t                "geometry": {\r\n\t                    "type": "Point",\r\n\t                    "coordinates": [coord[0]*1, coord[1]*1]\r\n\t                }\r\n\t            };\r\n\t            data.push(featrue);\r\n\t        }\r\n\t        //console.log(data);\r\n\t        scatterplotLayer.data = data;\r\n\t        //重新绘制\r\n\t        deckgl.render();\r\n\t    });\r\n\t}\r\n\t\r\n}\r\n\r\n/* harmony default export */ var layer_Visuals = (Visuals_Visuals);\n// CONCATENATED MODULE: ./src/modules/source/WMS.js\n/**\r\n * @author wf\r\n * @alias je.x.source.WMS\r\n * @class\r\n * @classdesc WMS数据源 \r\n * <p>通过配置实例化一个WMS数据源，用于各图层调用</p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass WMS{\r\n\r\n\tconstructor (option){\r\n\t\tthis.url = option.Url;\r\n\t\tlet wmsUtil = new GeoGlobe.Format.WMS();\r\n\t\tlet wlayer = wmsUtil.createLayer(this.url);\r\n\t\t\r\n\t\t//this.id = wlayer.id;\r\n\t    this.attributes = wlayer;\r\n  \t\tthis.options = option.Options;\r\n  \t\t\r\n  \t\tthis.CLASS_NAME = "x.source.WMS";\r\n\t}\r\n\t\t\r\n};\r\n\r\n/* harmony default export */ var source_WMS = (WMS);\n// CONCATENATED MODULE: ./src/modules/source/WMTS.js\n/**\r\n * @author wf\r\n * @alias je.x.source.WMTS\r\n * @class\r\n * @classdesc WMTS数据源 \r\n * <p>通过配置实例化一个WMTS数据源，用于各图层调用</p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass WMTS{\r\n\r\n\tconstructor (option){\r\n\t\tthis.url = null;\r\n\t\tthis.attributes = null;\r\n\t\tthis.style = null;\r\n\t\tthis.layerInf = null;\r\n\t\tthis.wmts_obj = null;\r\n\t\tthis.zoomOffset = (option.Options.ZoomOffset) ? option.Options.ZoomOffset : 0;\r\n\t\tvar cfg = option.Options;\r\n\t\tvar opt = { \r\n\t\t        layer: cfg.Layer, \r\n\t\t        TILEMATRIX: \'{z}\', \r\n\t\t        TILEROW: \'{y}\', \r\n\t\t        TILECOL: \'{x}\', \r\n\t\t        tileMatrixSet: cfg.MatrixSet, \r\n\t\t        format: cfg.Format, \r\n\t\t        version: option.Version, \r\n\t\t        style: cfg.Style,\r\n\t\t        width: 256,\r\n\t\t        height: 256\r\n\t\t    };\r\n\t\tvar service = null, url = null, layerInf = {}, _t = this, sprite, glyphs;\r\n\t    if(option.Type == "OGC-WMTS"){\r\n\t    \t\r\n\t\t\tservice = new GeoGlobe.Service.WMTS(option.Name, option.Url);\r\n\t\t\turl = gmapx.PROXY_URL + service.getTile(opt);\r\n\t\t\t//url = service.getTile(opt);\r\n\t\t\tif(!cfg.Time){}else{\r\n\t\t\t\turl += "&TIME="+ cfg.Time;\r\n\t\t\t}\r\n\t\t\tif(!cfg.USERECENT){\r\n\t\t\t\turl += "&USERECENT=false";\r\n\t\t\t}else{\r\n\t\t\t\turl += "&USERECENT=" + cfg.USERECENT;\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\tlet wmts_opt = {\r\n\t\t        url: option.Url,//地址\r\n\t\t        layer: cfg.Layer,//图层标识\r\n\t\t        format: cfg.Format,//格式\r\n\t\t        matrixSet: cfg.MatrixSet,//矩阵集名称\r\n\t\t        style: cfg.Style,//样式标识\r\n\t\t        version:option.Version,\r\n\t\t        name: option.Name,//可选，图层名称\r\n\t\t        resolutions: [],//可选，图层分辨率\r\n\t\t        zoomOffset: "",//可选，级别偏移值\r\n\t\t        matrixIds: [],//可选，矩阵的详细信息\r\n\t\t        tileOrigin: "",//可选，瓦片原点\r\n\t\t        tileFullExtent: ""//可选，图层范围\r\n\t\t    };\r\n\t\t    console.log(wmts_opt);\r\n\t\t\tthis.wmts_obj = new GeoGlobe.Layer.WMTS(wmts_opt);\r\n\t\t    console.log(this.wmts_obj);\r\n\t\t    */\r\n\t\t}else{\r\n\t\t\tservice = new GeoGlobe.Service.VTS(option.Name, option.Url, {async : false}); \r\n\t\t\tservice.async = false;\r\n\t\t\t//service.GetStyleName(function(names){\r\n\t\t\t\t\tservice.GetStyle(cfg.Style,function(result){\r\n\t\t\t\t\t\t//判断获取的style中是否有标注属性\r\n\t\t\t            if(result.sprite){\r\n\t\t\t                sprite = gmapx.PROXY_URL + result.sprite;\r\n\t\t\t            }else{\r\n\t\t\t                sprite = "";\r\n\t\t\t            }\r\n\t\t\t            if(result.glyphs){\r\n\t\t\t                glyphs = gmapx.PROXY_URL + result.glyphs;\r\n\t\t\t            }else{\r\n\t\t\t                glyphs = ""\r\n\t\t\t            }\r\n\t\t\t            \r\n\t\t\t            var styledata = result;\r\n\t\t\t            var Layer_data = {\r\n\t\t\t                "layers":[],\r\n\t\t\t                "source":{},\r\n\t\t\t                "source_id":"",\r\n\t\t\t                "layerType":"VTS"\r\n\t\t\t            };\r\n\t\t\t            var option_param = {\r\n\t\t\t                layer: cfg.Layer,\r\n\t\t\t                TILEMATRIX: \'{z}\',\r\n\t\t\t                TILEROW: \'{y}\',\r\n\t\t\t                TILECOL: \'{x}\',\r\n\t\t        \t\t\ttileMatrixSet: cfg.MatrixSet, \r\n\t\t\t                width: 256,\r\n\t\t\t                height: 256,\r\n\t\t        \t\t\tformat: cfg.Format\r\n\t\t\t            };\r\n\t\t\t\t\t\t//组成请求串\r\n\t\t\t            var url_vts = service.GetTile(option_param);\r\n            \t\t\tvar source_id = "source_vts_"+GeoGlobe.Util.randomStr(6);\r\n\t\t\t            Layer_data.source_id = source_id;\r\n\t\t\t            Layer_data.source = {\r\n\t\t\t                "type":"vector",\r\n\t\t\t                "tiles":[gmapx.PROXY_URL + url_vts]\r\n\t\t\t            };\r\n\t\t\t            if(styledata.styleData){\r\n\t\t\t                for(var i=0;i<styledata.styleData.layers.length;i++){\r\n\t\t\t                    styledata.styleData.layers[i].source = source_id;\r\n\t\t\t                }\r\n\t\t\t                Layer_data.layers =  styledata.styleData.layers;\r\n\t\t\t            }else{\r\n\t\t\t                for(var i=0;i<styledata.layers.length;i++){\r\n\t\t\t                    styledata.layers[i].source = source_id;\r\n\t\t\t                }\r\n\t\t\t                Layer_data.layers =  styledata.layers;\r\n\t\t\t            }\r\n\t\t\t\t        \t\r\n\t\t\t\t        \tlayerInf = Layer_data;\r\n\t\t\t\t        \t\r\n\t\t\t\t\t\t});\r\n\t\t\t\t//});\r\n\t\t\turl = gmapx.PROXY_URL + service.GetTile(opt);\r\n    \t}\r\n    \t\r\n\t    this.attributes = {\r\n  \t\t\t"type" : "raster",\r\n  \t\t\t"tiles" : [url],\r\n\t\t\t"zoomOffset" : this.zoomOffset,\r\n  \t\t\t"tileSize" : 256,\r\n  \t\t\t"sprite" : sprite,\r\n  \t\t\t"glyphs" : glyphs, \r\n  \t\t\t"layerData" : layerInf,\r\n  \t\t};\r\n  \t\tthis.options = cfg;\r\n\t\tthis.url = option.Url;\r\n\t}\r\n\t\r\n\tgetDimensions(){\r\n\t/*\r\n\t\tfetch(gmapx.PROXY_URL + this.url + "?request=getCapabilities").then(function(response) {\r\n\t\t\tconsole.log(response);\r\n\t\t  return response.json();\r\n\t\t}).then(function(data) {\r\n\t\t  console.log(data);\r\n\t\t}).catch(function(e) {\r\n\t\t  console.log("Oops, error");\r\n\t\t});\r\n\t\t*/\r\n\t}\r\n\t\r\n};\r\n\r\n/* harmony default export */ var source_WMTS = (WMTS);\r\n\n// CONCATENATED MODULE: ./src/modules/source/WFS.js\n/**\r\n * @author wf\r\n * @alias je.x.source.WFS\r\n * @class\r\n * @classdesc WFS数据源 \r\n * <p>WFS数据源</p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass WFS /** @lends je.x.source.WFS.prototype */{\r\n\t\r\n\tconstructor(option){\r\n\t\tthis.attributes = option;\r\n\t\tthis.data = null;\r\n\t\tthis.version = "1.0.0";\r\n\t\tthis.maxFeatures = 1000;\r\n\t\tthis.geometryName = "GEOMETRY";\r\n\t\tthis.order = true;\r\n\t\tthis.srsName = "EPSG:4326";\r\n\t\tthis.async = false;\r\n\t\t\r\n\t\t$.extend(this, option);\r\n\t\t\r\n\t\tthis.wfsQueryObj = new GeoGlobe.Query.WFSQuery( \r\n\t\t\tthis.url, //服务地址\r\n\t\t\tthis.typeName, //要素分类名称\r\n\t\t\t{\r\n\t\t\t\tgeometryName:this.geometryName,\r\n\t\t\t\tformat: this.version == "1.1.0" ? new GeoGlobe.Format.GML.v3({xy:!this.order}) : new GeoGlobe.Format.GML.v2({xy:true}),\r\n\t\t\t\tversion: this.version,\r\n\t\t\t\t//限制查询的结果数\r\n\t\t\t\tmaxFeatures: this.maxFeatures\r\n\t\t\t}\r\n\t\t);\r\n\t\t\r\n\t}\r\n\t\r\n    /***\r\n\t * 通过不同查询方式查询数据\r\n     * @param callback\r\n     */\r\n\tgetData(){\r\n\t\tlet cb = arguments[0], _t = this;\r\n\t\tif(typeof (arguments[0]) === "object"){\r\n            //this.obj = obj;\r\n            this._updateWfsObj(arguments[0]);\r\n            cb = arguments[1]\r\n\t\t}\r\n\t\t\r\n\t\tlet callback = (result) => {\r\n\t\t\t//console.log("wfs result: ");\r\n\t\t\t\r\n\t\t\t// todo: 临时数据格式转换·~\r\n\t\t\tlet arr = result.geojson.features;\r\n\t\t\tfor(let i=0; i<arr.length; i++){\r\n\t\t\t\tlet props = arr[i].properties;\r\n\t\t\t\tfor(let item in props){\r\n\t\t\t\t\tlet tmp = props[item];\r\n\t\t\t\t\tlet v = Number( tmp );\r\n\t\t\t\t\tif(!isNaN(v) && v!=0){\r\n\t\t\t\t\t\tprops[item] = v;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//console.log(result);\r\n\t\t\t_t.data = result.geojson;\r\n\t\t\tcb(result.geojson);\r\n\t\t}\r\n\t\t\r\n\t\tif(this.queryType == "bbox"){\r\n            this.getBboxData(callback);\r\n\t\t}else if(this.queryType == "point"){\r\n            this.getPointData(this.param,callback);\r\n\t\t}else if(this.queryType == "path"){\r\n            this.getLineData(this.param,callback);\r\n\t\t}else if(this.queryType == "polygon"){\r\n            this.getPolygonData(this.param,callback);\r\n\t\t}else if(this.queryType == "attribute"){\r\n            this.getAttributeData(this.param,callback);\r\n\t\t}else {\r\n\t\t\talert("请检查查询方式是否正确！")\r\n\t\t}\r\n\t}\r\n\t\r\n    /***\r\n     * 通过范围查询获取数据\r\n     *\r\n     * @param callback\r\n     */\r\n\tgetBboxData(callback) {\r\n        var extent = {};\r\n        if(this.lock){\r\n            extent = this.extent;\r\n        }\r\n\t\tif(this.extent){\r\n            if(this.extent.type === "Polygon"){\r\n            \tvar o = {polygon:this.extent};\r\n\t\t\t\tthis.getPolygonData(o,callback);\r\n\t\t\t\treturn\r\n            }else{\r\n                var bbox = this.extent.coordinates;\r\n                extent = new GeoGlobe.LngLatBounds(bbox[0],bbox[1])\r\n\t\t\t}\r\n\t\t}else {\r\n            extent = new GeoGlobe.LngLatBounds([-180,-90], [180,90]);\r\n\t\t}\r\n        if(this.version == "1.1.0"){\r\n            var temp = extent.toBBOX(null, this.order);\r\n            extent = GeoGlobe.LngLatBounds.fromString(temp);\r\n        }\r\n        this.wfsQueryObj.bboxQuery(extent,\r\n            function(result){\r\n                callback(result);\r\n            },\r\n            function(result){\r\n                console.log(result);\r\n            }\r\n        );\r\n    }\r\n    \r\n    /***\r\n     * 通过点查询获取数据\r\n     * @param param\r\n     * eg:{\r\n\t * \tpoint:{\r\n\t * \t\t"type":"Point",\r\n\t * \t\t"coordinates":[112.62,37.54]\r\n\t * \t}\r\n\t *\tdistance:2000,\r\n\t *\tunit:"m",\r\n\t * }\r\n     * @param callback\r\n     */\r\n\tgetPointData(param,callback) {\r\n        var queryPoint = new GeoGlobe.Geometry.Point(param.point.coordinates[0],param.point.coordinates[1]);\r\n        if(this.version == "1.1.0"){\r\n            queryPoint = new GeoGlobe.Geometry.Point(param.point.coordinates[1],param.point.coordinates[0]);\r\n\t\t}\r\n\r\n        this.wfsQueryObj.pointQuery(queryPoint,param.distance,param.unit,\r\n\t\t\tfunction (result) {\r\n\t\t\t\tcallback(result);\r\n\t\t\t},function (result) {\r\n\t\t\t\tconsole.log(result);\r\n        \t}\r\n        );\r\n    }\r\n    \r\n    /***\r\n     * 通过线查询获取数据\r\n     * @param param\r\n     * eg:{\r\n\t * \tpath:{\r\n\t * \t\t"type":"LineString",\r\n\t * \t\t"coordinates":\t[[112.62,37.54],[111.78,38.07],[111.12,37.33],[112.62,37.54]]\r\n\t * \t}\r\n\t *\tdistance:20000,\r\n\t *\tunit:"m",\r\n\t * }\r\n     * @param callback\r\n     */\r\n\tgetLineData(param,callback) {\r\n        var line = [];\r\n        param.path.coordinates.forEach(function (v, i) {\r\n            if(this.version == "1.1.0"){\r\n                line.push(new GeoGlobe.Geometry.Point(v[1], v[0]))\r\n            }else{\r\n                line.push(new GeoGlobe.Geometry.Point(v[0], v[1]))\r\n\t\t\t}\r\n        });\r\n\t\tvar queryPath = new GeoGlobe.Geometry.LineString(line);\r\n\r\n        this.wfsQueryObj.pathQuery(queryPath, param.distance, param.unit,\r\n\t\t\tfunction (result) {\r\n            \tcallback(result);\r\n\t\t\t},function (result) {\r\n\t\t\t\tconsole.log(result);\r\n        \t}\r\n        );\r\n    }\r\n    \r\n    /***\r\n\t * 通过面查询获取数据\r\n     * @param param\r\n     * eg:{\r\n\t * \tpolygon:{\r\n\t * \t\t"type":"Polygon",\r\n\t * \t\t"coordinates":[[[112.62,37.54],[111.78,38.07],[111.12,37.33],[112.62,37.54]]],\r\n\t * \t}\r\n\t * }\r\n     * @param callback\r\n     */\r\n\tgetPolygonData(param,callback) {\r\n        if(!param.isContain){\r\n            param.isContain = true;\r\n\t\t}\r\n\t\tvar polygon = [];\r\n        param.polygon.coordinates.forEach(function (v ,i) {\r\n\t\t\tvar line = [];\r\n\t\t\tv.forEach(function (value ,j) {\r\n                if(this.version == "1.1.0"){\r\n                    line.push(new GeoGlobe.Geometry.Point(value[1], value[0]))\r\n\t\t\t\t}else {\r\n                    line.push(new GeoGlobe.Geometry.Point(value[0], value[1]))\r\n                }\r\n            });\r\n            polygon.push(new GeoGlobe.Geometry.LinearRing(line))\r\n        });\r\n        var queryPolygon = new GeoGlobe.Geometry.Polygon(polygon);\r\n\r\n        this.wfsQueryObj.polygonQuery(queryPolygon, param.isContain,\r\n\t\t\tfunction (result) {\r\n\t\t\t\tcallback(result)\r\n\t\t\t},function (result) {\r\n\t\t\t\tconsole.log(result);\r\n\t\t\t}\r\n        );\r\n    }\r\n    \r\n    /***\r\n\t * 通过属性查询获取数据\r\n\t *\r\n     * @param param\r\n\t * eg:{\r\n\t * \tproperty:"CN_NAME",\r\n  \t *\tvalue:"平遥"\r\n\t * }\r\n     * @param callback\r\n     */\r\n\tgetAttributeData(param,callback) {\r\n\t\tvar value = param.value ;\r\n\t\tvar type = GeoGlobe.Filter.Comparison.EQUAL_TO;\r\n\t\tif(!param.options){\r\n            param.options = null;\r\n\t\t}\r\n\r\n        this.wfsQueryObj.attributeQuery(type,param.property,value,param.options,\r\n\t\t\tfunction (result) {\r\n            \tcallback(result)\r\n\t\t\t},function (result) {\r\n\t\t\t\tconsole.log(result)\r\n\t\t\t}\r\n        );\r\n    }\r\n    \r\n\t_updateWfsObj(param) {\r\n\t\t$.extend(this,param);\r\n\t\tvar dele_wfsObj = new GeoGlobe.Query.WFSQuery(\r\n            this.url, //服务地址\r\n            this.typeName, //要素分类名称\r\n            {\r\n                geometryName:this.geometryName,\r\n                format: this.version == "1.1.0" ? new GeoGlobe.Format.GML.v3({xy:!this.order}) : new GeoGlobe.Format.GML.v2({xy:true}),\r\n                version: this.version,\r\n                //限制查询的结果数\r\n                maxFeatures: this.maxFeatures,\r\n                srsName : this.srsName\r\n            }\r\n        );\r\n\t\tthis.wfsQueryObj = dele_wfsObj;\r\n    }\r\n    \r\n};\r\n\r\n/* harmony default export */ var source_WFS = (WFS);\n// CONCATENATED MODULE: ./src/modules/source/Base.js\n\r\nclass Base_Base{\r\n\r\n\tconstructor(option){\r\n\t\tthis.isForce = true;\r\n\t\tthis._geojson = {};\r\n\t\tthis.handleFunc = {};\r\n\t}\r\n\ton(type, func){\r\n        if(this.handleFunc[type]){\r\n            if(this.handleFunc[type].indexOf(func)===-1){\r\n                this.handleFunc[type].push(func);\r\n            }\r\n        }else{\r\n            this.handleFunc[type]=[func];\r\n        }\r\n\r\n    };\r\n\r\n    trigger(type, params){\r\n        try{\r\n            let target = this.handleFunc[type];\r\n            let count = target.length;\r\n            for (var i = 0; i < count; i++) {\r\n                target[i](params);\r\n            }\r\n            return true;\r\n        }catch (e){\r\n        \t//console.error(e);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    off(type,func){\r\n        try{\r\n            let target = this.handleFunc[type];\r\n            let index=target.indexOf(func);\r\n            if(index===-1)throw error;\r\n            target.splice(index,1);\r\n        }catch (e){\r\n        \t//console.error(e);\r\n        }\r\n    };\r\n\r\n    once(type,func) {\r\n        this.on(type, func)?\r\n            this.off(type, func):null;\r\n    };\r\n    \r\n\tgetDataRange(type){\r\n\t\tlet i = 0, min = 0, max = 0;\r\n\t\tthis._geojson.features.forEach((value) => {\r\n\t\t\tlet tmp = value.properties[type];\r\n\t\t\tif(i == 0) { min = tmp; max = tmp; }\r\n\t\t\tif(tmp > max){\r\n\t\t\t\tmax = tmp;\r\n\t\t\t}else if(tmp < min){\r\n\t\t\t\tmin = tmp;\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t});\r\n\t\treturn [min, max];\r\n\t}\r\n\t\r\n}\r\n\r\n/* harmony default export */ var source_Base = (Base_Base);\n// CONCATENATED MODULE: ./src/modules/source/GeoJSON.js\n\r\n\r\n/**\r\n * @author wf\r\n * @alias je.x.source.Raster\r\n * @class\r\n * @classdesc geojson数据源\r\n * <p>geojson数据源</p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass GeoJSON_GeoJSON extends source_Base{\r\n\t\r\n\tconstructor(option){\r\n\t\tsuper(option);\r\n\t\t\r\n\t\tthis.dataUpdate = null;\r\n\t\t\r\n\t\t$.extend(this, option);\r\n\t\t\r\n\t\tif(this.dataUpdate != null){\r\n\t\t\tthis.on("data_update", this.dataUpdate);\r\n\t\t}\r\n\t\t\r\n\t\tthis.getData(()=>{});\r\n\t}\r\n\t\r\n\tsetData(data, isForce){\r\n\t\t// todo: 还需要校验结构·~\r\n\t\tthis.data = data;\r\n\t\tthis._geojson = this.data;\r\n\t\t\r\n\t\tif(isForce){\r\n\t\t\tthis.trigger("data_update", this.data);\r\n\t\t\tthis.isForce = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tgetData(callback, isForce){\r\n\t\tlet _t = this;\r\n\t\t\r\n\t\t$.extend(this.isForce, isForce);\r\n\t\t\r\n\t\t// 如果没有url, 则返回data\r\n\t\tif(!this.url){\r\n\t\t\tthis.setData(this.data, this.isForce);\r\n\t\t\tcallback(this.data);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$.ajaxSettings.async = false;\r\n\t\t$.get(this.url, function(result){\r\n\t\t\t_t.setData(result, _t.isForce);\r\n\t\t\ttry{\r\n\t\t\t\tcallback(result);\r\n\t\t\t}catch(e){\r\n\t\t\t\tconsole.error(e);\r\n\t\t\t}\r\n\t\t},"json");\r\n\t\t$.ajaxSettings.async = true;\r\n\t}\r\n\t\r\n\tvalidate(){\r\n\t\t\r\n\t}\r\n\t\r\n};\r\n\r\n/* harmony default export */ var source_GeoJSON = (GeoJSON_GeoJSON);\n// CONCATENATED MODULE: ./src/modules/source/Raster.js\n/**\r\n * @author wf\r\n * @alias je.x.source.Raster\r\n * @class\r\n * @classdesc 栅格数据源\r\n * <p>栅格数据源</p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass Raster{\r\n\t\r\n\tconstructor (option){\r\n\t\t$.extend(this, option);\r\n\t\t\r\n\t\tlet cfg = option.Options;\r\n\t\tlet url = gmapx.PROXY_URL + option.Url;\r\n\t\t\r\n\t\tthis.attributes = {\r\n  \t\t\t"type" : "raster",\r\n  \t\t\t"tiles" : [url],\r\n  \t\t\t"tileSize" : 256\r\n  \t\t};\r\n  \t\t\r\n  \t\tthis.options = cfg;\r\n\t\tthis.url = option.Url;\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n/* harmony default export */ var source_Raster = (Raster);\n// CONCATENATED MODULE: ./src/modules/source/RTDS.js\n\r\n\r\n/**\r\n * @author wf\r\n * @alias je.x.source.RTDS\r\n * @class\r\n * @classdesc Geosmarter rtds数据源 \r\n * <p></p>\r\n * @since version 0.2\r\n * @param {Object} option 初始化参数\r\n */\r\nclass RTDS_RTDS extends source_Base{\r\n\r\n\tconstructor (option){\r\n\t\tsuper(option);\r\n\t\tthis.bbox = [-180, -90, 180, 90];\r\n\t\t\r\n\t\t$.extend(this, option);\r\n\t\t\r\n\t\tthis.EVENT_TYPES = ["dataupdate"];\r\n\t\t\r\n\t    this.rtds = new GeoGlobe.Service.RTDS(\'实时数据服务\', this.url,{\r\n\t    \tversion: \'1.0.0\',\r\n\t    \tformat: \'json\'\r\n\t    });\r\n\t}\r\n\t\r\n\t/**\r\n     * @method\r\n     * @desc 重置参数\r\n     */\r\n\tsetParam(o){\r\n\t\tthis.param = {\r\n\t\t\t"STARTTIME" : "2008-01-01 00:00:00", \r\n\t\t\t"ENDTIME" : "2208-12-31 23:59:59"\r\n\t\t};\r\n\t\t$.extend(this.param, o);\r\n\t}\r\n\t\r\n\t/**\r\n     * @method\r\n     * @desc 获取数据\r\n     */\r\n\tgetData(){\r\n\t\tlet cb = arguments[0], _t = this, param = {};\r\n\t\tif(typeof (arguments[0]) === "object"){\r\n\t\t\tparam = arguments[0]; \r\n            cb = arguments[1]\r\n\t\t}\r\n\t\t\r\n\t\tlet callback = (result) => {\r\n\t\t\tresult.geojson = _t.convert2GeoJson(result.features);\r\n\t\t\t//console.log(result);\r\n\t\t\tcb(result.geojson);\r\n\t\t\t_t.trigger("dataupdate", result.geojson);\r\n\t\t}\r\n\t\t\r\n\t\tthis.getObservation(param, callback);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @method\r\n\t * @des 排行统计\r\n\t **/\r\n\tfeatureAggs(param, callback){\r\n\t\t//排行统计\r\n\t\tvar p = {\r\n\t\t\tdatasetname: this.DATASETNAME,\r\n\t\t\tstarttime: \'2012-01-01 00:00:00\',\r\n\t\t\tendtime: \'2118-12-31 23:59:59\',\r\n\t\t\t//groupbypro: \'industry_type\',\r\n\t\t\tbbox: "[" +this.bbox + "]"\r\n\t\t};\r\n\t\t$.extend(p, param)\r\n\t\tthis.rtds.featureAggs(p, function(e){\r\n\t\t\t//TODO success\r\n\t\t\ttry{\r\n\t\t\tcallback(e);\r\n\t\t\t}catch(e){}\r\n\t\t}, function(e){\r\n\t\t\t//TODO faile\r\n\t\t})\r\n\t}\r\n\t\r\n\tgetObservation(param, callback){\r\n\t\tlet _t = this;\r\n\t\tlet p = {\r\n\t\t\t"SERVICE" : "RTDS",\r\n\t\t\t"VERSION" : "1.0.0",\r\n\t\t\t"REQUEST" : "GetObservation",\r\n\t\t\t"FORMAT" : "json",\r\n\t\t\t"DATASETNAME" : this.DATASETNAME\r\n\t\t};\r\n\t\t\r\n\t\t$.extend(p, param);\r\n\t\t\r\n\t\tthis._get(p, function(result){\r\n\t\t\tcallback(result);\r\n\t\t})\r\n\t}\r\n\t\r\n\t_get(param, callback){\r\n\t\t$.ajax({\r\n\t\t\turl : this.url,\r\n\t\t\tdata : param,\r\n\t\t\tsuccess : function(result){\r\n\t\t\t\tcallback(result);\r\n\t\t\t},\r\n\t\t\tdataType : "json"\r\n\t\t})\r\n\t}\r\n\t\r\n\t/**\r\n\t * @method\r\n\t * @des 讲数据转换成GeoJson\r\n\t **/\r\n\tconvert2GeoJson(data){\r\n\t\tvar geojson = {\r\n\t\t\t"type": "FeatureCollection",\r\n\t\t\t"features":[]\r\n\t\t};\r\n\t\tfor(let f in data){\r\n\t\t\tlet o = data[f], prop = {};\r\n\t\t\t//console.log(o);\r\n\t\t\t\r\n\t\t\tfor(let field in o.observationProperty){\r\n\t\t\t\tif(field == "locations") continue;\r\n\t\t\t\tprop[field] = o.observationProperty[field].value;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet point = o.observationProperty.locations.value;\r\n\t\t\t\r\n\t\t\tlet tmp = {\r\n\t\t\t    "type": "Feature",\r\n\t\t\t    "geometry": {\r\n\t\t\t        "type": "Point",\r\n\t\t\t        "coordinates": [point[0], point[1]]\r\n\t\t\t    },\r\n\t\t\t    "properties": prop\r\n\t\t\t};\r\n\t\t\tgeojson["features"].push(tmp);\r\n\t\t}\r\n\t\treturn geojson;\r\n\t}\r\n\t\r\n}\r\n\r\n/* harmony default export */ var source_RTDS = (RTDS_RTDS);\n// CONCATENATED MODULE: ./src/modules/extent.js\n/**\r\n * @author wf\r\n * @alias je.x.extent\r\n * @namespace\r\n * @since version 0.4\r\n */\r\n\r\n\t\r\n\t/**\r\n\t * 创建一个包括所有给定坐标的范围·~\r\n\t * @param {Array.<je.x.Coordinate>} coordinates Coordinate.\r\n\t * @return {je.x.Extent} Extent.\r\n\t */\r\nfunction boundingExtent (coordinates){\r\n  \t\tvar extent = this.createEmpty();\r\n  \t\tfor (var i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    \t\tthis.extendCoordinate(extent, coordinates[i]);\r\n  \t\t}\r\n  \t\treturn extent;\r\n\t}\r\n\t\r\n\t/**\r\n\t * 更具给定的缓冲数值，返回扩大后的范围。\r\n\t * @param {je.x.Extent} extent Extent.\r\n\t * @param {Number} value 缓冲程度的数量.\r\n\t * @param {je.x.Extent} opt_extent Extent.\r\n\t * @return {je.x.Extent} Extent.\r\n\t */\r\nfunction buffer (extent, value, opt_extent){\r\n\t\tif (opt_extent) {\r\n\t\t    opt_extent[0] = extent[0] - value;\r\n\t\t    opt_extent[1] = extent[1] - value;\r\n\t\t    opt_extent[2] = extent[2] + value;\r\n\t\t    opt_extent[3] = extent[3] + value;\r\n\t\t    return opt_extent;\r\n\t\t  } else {\r\n\t\t    return [\r\n\t\t      extent[0] - value,\r\n\t\t      extent[1] - value,\r\n\t\t      extent[2] + value,\r\n\t\t      extent[3] + value\r\n\t\t    ];\r\n\t\t  }\r\n\t}\r\n\t\r\n\t/**\r\n\t * 校验给定的坐标是否包含在范围的内\r\n\t * @param {je.x.Extent} extent Extent.\r\n\t * @param {je.x.Coordinate} coordinate Coordinate.\r\n\t * @return {je.x.Extent} 是否包含.\r\n\t */\r\nfunction containsCoordinate (extent, coordinate){\r\n\t\treturn this.containsXY(extent, coordinate[0], coordinate[1]);\r\n\t}\r\n\t\r\n\t/**\r\n\t * 校验给定的范围是否包含在另一个范围\r\n\t * @param {je.x.Extent} extent1 给定范围.\r\n\t * @param {je.x.Extent} extent2 校验范围.\r\n\t * @return {Boolean} 是否包含.\r\n\t */\r\nfunction containsExtent (extent1, extent2){\r\n\t\treturn extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\r\n\t}\r\n\t\r\n\t/**\r\n\t * 校验坐标是否包含在在范围的内\r\n\t * @param {je.x.Extent} extent Extent.\r\n\t * @param {Number} x x坐标.\r\n\t * @param {Number} y y坐标.\r\n\t * @return {Boolean} 是否包含.\r\n\t */\r\nfunction containsXY (extent, x, y){\r\n\t\treturn extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\r\n\t}\r\n\t\r\n\t/**\r\n\t * 创建一个空范围.\r\n\t * @static \r\n\t * @return {je.x.Extent} Extent.\r\n\t */\r\nfunction createEmpty (){\r\n\t\treturn [Infinity, Infinity, -Infinity, -Infinity];\r\n\t}\r\n\t\r\n\t/**\r\n\t * 创建或者更新范围.\r\n\t * @ignore \r\n\t * @param {number} minX 最小 X.\r\n\t * @param {number} minY 最小 Y.\r\n\t * @param {number} maxX 最大 X.\r\n\t * @param {number} maxY 最大 Y.\r\n\t * @param {je.x.Extent} opt_extent 目标范围.\r\n\t * @return {je.x.Extent} Extent.\r\n\t */\r\nfunction createOrUpdate (minX, minY, maxX, maxY, opt_extent) {\r\n\t\tif (opt_extent) {\r\n\t\t  opt_extent[0] = minX;\r\n\t\t  opt_extent[1] = minY;\r\n\t\t  opt_extent[2] = maxX;\r\n\t\t  opt_extent[3] = maxY;\r\n\t\t  return opt_extent;\r\n\t\t} else {\r\n\t\t  return [minX, minY, maxX, maxY];\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * 创建或者更新空范围.\r\n\t * @ignore \r\n\t * @param {je.x.Extent} opt_extent Extent.\r\n\t * @return {je.x.Extent} Extent.\r\n\t */\r\nfunction createOrUpdateEmpty (opt_extent) {\r\n\t\treturn createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);\r\n\t}\r\n\t\r\n\t/**\r\n\t * 根据一个坐标创建或更新一个范围.\r\n\t * @ignore \r\n\t * @param {je.x.Coordinate} coordinate Coordinate.\r\n\t * @param {je.x.Extent} opt_extent Extent.\r\n\t * @return {je.x.Extent} Extent.\r\n\t */\r\nfunction createOrUpdateFromCoordinate (coordinate, opt_extent) {\r\n\t\t  var x = coordinate[0];\r\n\t\t  var y = coordinate[1];\r\n\t\t  return createOrUpdate(x, y, x, y, opt_extent);\r\n\t}\r\n\t\r\n\t/**\r\n\t * 根据一组坐标创建或更新一个范围.\r\n\t * @ignore \r\n\t * @param {Array.<je.x.Coordinate>} coordinates Coordinate.\r\n\t * @param {je.x.Extent} opt_extent Extent.\r\n\t * @return {je.x.Extent} Extent.\r\n\t */\r\nfunction createOrUpdateFromCoordinates (coordinates, opt_extent) {\r\n\t\tvar extent = createOrUpdateEmpty(opt_extent);\r\n\t\treturn extendCoordinates(extent, coordinates);\r\n\t}\r\n\t\r\n\t/**\r\n\t * 修改范围以包括另一个范围。\r\n\t * @param {je.x.Extent} extent1 扩展了要修改的范围.\r\n\t * @param {je.x.Extent} extent2 将包含在第一个范围内.\r\n\t * @return {je.x.Extent} 对第一个（扩展）范围的引用。\r\n\t */\r\nfunction extend (extent1, extent2){\r\n\t\tif (extent2[0] < extent1[0]) {\r\n\t\t  extent1[0] = extent2[0];\r\n\t\t}\r\n\t\tif (extent2[2] > extent1[2]) {\r\n\t\t  extent1[2] = extent2[2];\r\n\t\t}\r\n\t\tif (extent2[1] < extent1[1]) {\r\n\t\t  extent1[1] = extent2[1];\r\n\t\t}\r\n\t\tif (extent2[3] > extent1[3]) {\r\n\t\t  extent1[3] = extent2[3];\r\n\t\t}\r\n\t\treturn extent1;\r\n\t}\r\n\t\r\nfunction extendCoordinate (extent, coordinate) {\r\n\t\tif (coordinate[0] < extent[0]) {\r\n\t\t  extent[0] = coordinate[0];\r\n\t\t}\r\n\t\tif (coordinate[0] > extent[2]) {\r\n\t\t  extent[2] = coordinate[0];\r\n\t\t}\r\n\t\tif (coordinate[1] < extent[1]) {\r\n\t\t  extent[1] = coordinate[1];\r\n\t\t}\r\n\t\tif (coordinate[1] > extent[3]) {\r\n\t\t  extent[3] = coordinate[1];\r\n\t\t}\r\n\t}\r\n\t\r\nfunction extendCoordinates (extent, coordinates) {\r\n\t  for (var i = 0, ii = coordinates.length; i < ii; ++i) {\r\n\t    this.extendCoordinate(extent, coordinates[i]);\r\n\t  }\r\n\t  return extent;\r\n\t}\r\n\t\r\nfunction extendFlatCoordinates (extent, flatCoordinates, offset, end, stride) {\r\n\t  for (; offset < end; offset += stride) {\r\n\t    this.extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\r\n\t  }\r\n\t  return extent;\r\n\t}\r\n\r\nfunction extendRings (extent, rings) {\r\n\t  for (var i = 0, ii = rings.length; i < ii; ++i) {\r\n\t    this.extendCoordinates(extent, rings[i]);\r\n\t  }\r\n\t  return extent;\r\n\t}\r\n\r\nfunction extendXY (extent, x, y) {\r\n\t  extent[0] = Math.min(extent[0], x);\r\n\t  extent[1] = Math.min(extent[1], y);\r\n\t  extent[2] = Math.max(extent[2], x);\r\n\t  extent[3] = Math.max(extent[3], y);\r\n\t}\r\n\t\r\n\t/**\r\n\t * 获得指定范围的margin.\r\n\t * @static \r\n\t * @param extent {je.x.Extent} Extent.\r\n\t * @return {je.x.Size} Center.\r\n\t */\r\nfunction getMargin (extent) {\r\n\t  \treturn getWidth(extent) + getHeight(extent);\r\n\t}\r\n\r\n\t/**\r\n\t * 获得指定范围的宽高.\r\n\t * @static \r\n\t * @param extent {je.x.Extent} Extent.\r\n\t * @return {je.x.Size} Center.\r\n\t */\r\nfunction getSize (extent) {\r\n\t  \treturn [extent[2] - extent[0], extent[3] - extent[1]];\r\n\t}\r\n\t\r\n\t/**\r\n\t * 获得指定范围左上角顶点的坐标.\r\n\t * @static \r\n\t * @param extent {je.x.Extent} Extent.\r\n\t * @return {je.x.Coordinate} TopLeft.\r\n\t */\r\nfunction getTopLeft (extent) {\r\n\t  \treturn [extent[0], extent[3]];\r\n\t}\r\n\t\r\n\t/**\r\n\t * 获得指定范围右上角顶点的坐标.\r\n\t * @static \r\n\t * @param extent {je.x.Extent} Extent.\r\n\t * @return {je.x.Coordinate} TopRight.\r\n\t */\r\nfunction getTopRight (extent) {\r\n\t  \treturn [extent[2], extent[3]];\r\n\t}\r\n\t\r\n\t/**\r\n\t * 获得指定范围左下角顶点的坐标.\r\n\t * @static \r\n\t * @param extent {je.x.Extent} Extent.\r\n\t * @return {je.x.Coordinate} TopRight.\r\n\t */\r\nfunction getBottomLeft (extent) {\r\n\t  return [extent[0], extent[1]];\r\n\t}\r\n\r\n\t/**\r\n\t * 获得指定范围右下角顶点的坐标.\r\n\t * @static \r\n\t * @param extent {je.x.Extent} Extent.\r\n\t * @return {je.x.Coordinate} TopRight.\r\n\t */\r\nfunction getBottomRight (extent) {\r\n\t  return [extent[2], extent[1]];\r\n\t}\r\n\t\r\n\t/**\r\n\t * 获得指定范围中心点的坐标.\r\n\t * @static \r\n\t * @param extent {je.x.Extent} Extent.\r\n\t * @return {je.x.Coordinate} Center.\r\n\t */\r\nfunction getCenter (extent){\r\n\t\treturn [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\r\n\t}\r\n\t\r\n\t/**\r\n\t * 获得指定范围的宽度.\r\n\t * @static \r\n\t * @param extent {je.x.Extent} Extent.\r\n\t * @return {number} Width.\r\n\t */\r\nfunction getWidth (extent){\r\n  \t\treturn extent[2] - extent[0];\r\n\t}\r\n\t\r\n\t/**\r\n\t * 获得指定范围的高度.\r\n\t * @static \r\n\t * @param extent {je.x.Extent} Extent.\r\n\t * @return {number} Height.\r\n\t */\r\nfunction getHeight (extent){\r\n  \t\treturn extent[3] - extent[1];\r\n\t}\r\n\t\r\nfunction getCorner (extent, corner) {\r\n\t\tvar coordinate;\r\n\t\tif (corner === Corner.BOTTOM_LEFT) {\r\n\t\t  coordinate = getBottomLeft(extent);\r\n\t\t} else if (corner === Corner.BOTTOM_RIGHT) {\r\n\t\t  coordinate = getBottomRight(extent);\r\n\t\t} else if (corner === Corner.TOP_LEFT) {\r\n\t\t  coordinate = getTopLeft(extent);\r\n\t\t} else if (corner === Corner.TOP_RIGHT) {\r\n\t\t  coordinate = getTopRight(extent);\r\n\t\t} else {\r\n\t\t  // Invalid corner\r\n\t\t}\r\n\t\treturn (\r\n\t\t  (coordinate)\r\n\t\t);\r\n\t}\r\n\t\r\n\t/**\r\n\t * 校验是否相交。\r\n\t * @param {je.x.Extent} extent1 Extent.\r\n\t * @param {je.x.Extent} extent2 Extent.\r\n\t * @return {Boolean} 是否相交。\r\n\t */\r\nfunction intersects (extent1, extent2){\r\n\t\treturn extent1[0] <= extent2[2] &&\r\n\t\t    extent1[2] >= extent2[0] &&\r\n\t\t    extent1[1] <= extent2[3] &&\r\n\t\t    extent1[3] >= extent2[1];\r\n\t}\r\n\t\r\n\t/**\r\n\t * 确定某个范围是否为空。\r\n\t * @param {je.x.Extent} extent Extent.\r\n\t * @return {Boolean} 是否为空。\r\n\t */\r\nfunction isEmpty (extent) {\r\n\t  return extent[2] < extent[0] || extent[3] < extent[1];\r\n\t}\r\n\n// CONCATENATED MODULE: ./src/modules/util.js\n/**\r\n * @author wf\r\n * @alias je.x.util.coordtransform\r\n * @namespace\r\n * @since version 0.4\r\n */\r\n\r\nconst coordtransform = {\r\n\t//定义一些常量\r\n\tx_PI : 3.14159265358979324 * 3000.0 / 180.0,\r\n\tPI : 3.1415926535897932384626,\r\n\ta : 6378245.0,\r\n\tee : 0.00669342162296594323,\r\n\t/**\r\n\t * 百度坐标系 (BD-09) 与 火星坐标系 (GCJ-02)的转换\r\n\t * 即 百度 转 谷歌、高德\r\n\t * @param bd_lon\r\n\t * @param bd_lat\r\n\t * @returns {*[]}\r\n\t */\r\n\tbd09togcj02 : function(bd_lon, bd_lat) {\r\n\t\tvar x_PI = this.x_PI;\r\n\t\tvar PI = this.PI;\r\n\t\tvar a = this.a;\r\n\t\tvar ee = this.ee;\r\n\t  var bd_lon = +bd_lon;\r\n\t  var bd_lat = +bd_lat;\r\n\t  var x = bd_lon - 0.0065;\r\n\t  var y = bd_lat - 0.006;\r\n\t  var z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * x_PI);\r\n\t  var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * x_PI);\r\n\t  var gg_lng = z * Math.cos(theta);\r\n\t  var gg_lat = z * Math.sin(theta);\r\n\t  return [gg_lng, gg_lat]\r\n\t},\r\n\t\r\n\t/**\r\n\t * 火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换\r\n\t * 即谷歌、高德 转 百度\r\n\t * @param lng\r\n\t * @param lat\r\n\t * @returns {*[]}\r\n\t */\r\n\tgcj02tobd09 : function(lng, lat) {\r\n\t\tvar x_PI = this.x_PI;\r\n\t\tvar PI = this.PI;\r\n\t\tvar a = this.a;\r\n\t\tvar ee = this.ee;\r\n\t  var lat = +lat;\r\n\t  var lng = +lng;\r\n\t  var z = Math.sqrt(lng * lng + lat * lat) + 0.00002 * Math.sin(lat * x_PI);\r\n\t  var theta = Math.atan2(lat, lng) + 0.000003 * Math.cos(lng * x_PI);\r\n\t  var bd_lng = z * Math.cos(theta) + 0.0065;\r\n\t  var bd_lat = z * Math.sin(theta) + 0.006;\r\n\t  return [bd_lng, bd_lat]\r\n\t},\r\n\t\r\n\t/**\r\n\t * WGS84转GCj02\r\n\t * @param lng\r\n\t * @param lat\r\n\t * @returns {*[]}\r\n\t */\r\n\twgs84togcj02 : function(lng, lat) {\r\n\t\tvar x_PI = this.x_PI;\r\n\t\tvar PI = this.PI;\r\n\t\tvar a = this.a;\r\n\t\tvar ee = this.ee;\r\n\t  var lat = +lat;\r\n\t  var lng = +lng;\r\n\t  if (out_of_china(lng, lat)) {\r\n\t    return [lng, lat]\r\n\t  } else {\r\n\t    var dlat = transformlat(lng - 105.0, lat - 35.0);\r\n\t    var dlng = transformlng(lng - 105.0, lat - 35.0);\r\n\t    var radlat = lat / 180.0 * PI;\r\n\t    var magic = Math.sin(radlat);\r\n\t    magic = 1 - ee * magic * magic;\r\n\t    var sqrtmagic = Math.sqrt(magic);\r\n\t    dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * PI);\r\n\t    dlng = (dlng * 180.0) / (a / sqrtmagic * Math.cos(radlat) * PI);\r\n\t    var mglat = lat + dlat;\r\n\t    var mglng = lng + dlng;\r\n\t    return [mglng, mglat]\r\n\t  }\r\n\t},\r\n\t\r\n\t/**\r\n\t * GCJ02 转换为 WGS84\r\n\t * @param lng\r\n\t * @param lat\r\n\t * @returns {*[]}\r\n\t */\r\n\tgcj02towgs84 : function(lng, lat) {\r\n\t\tvar x_PI = this.x_PI;\r\n\t\tvar PI = this.PI;\r\n\t\tvar a = this.a;\r\n\t\tvar ee = this.ee;\r\n\t  var lat = +lat;\r\n\t  var lng = +lng;\r\n\t  if (this.out_of_china(lng, lat)) {\r\n\t    return [lng, lat]\r\n\t  } else {\r\n\t    var dlat = this.transformlat(lng - 105.0, lat - 35.0);\r\n\t    var dlng = this.transformlng(lng - 105.0, lat - 35.0);\r\n\t    var radlat = lat / 180.0 * PI;\r\n\t    var magic = Math.sin(radlat);\r\n\t    magic = 1 - ee * magic * magic;\r\n\t    var sqrtmagic = Math.sqrt(magic);\r\n\t    dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * PI);\r\n\t    dlng = (dlng * 180.0) / (a / sqrtmagic * Math.cos(radlat) * PI);\r\n\t    var mglat = lat + dlat;\r\n\t    var mglng = lng + dlng;\r\n\t    return [lng * 2 - mglng, lat * 2 - mglat]\r\n\t  }\r\n\t},\r\n\t\r\n\ttransformlat : function(lng, lat) {\r\n\t\tvar x_PI = this.x_PI;\r\n\t\tvar PI = this.PI;\r\n\t\tvar a = this.a;\r\n\t\tvar ee = this.ee;\r\n\t  var lat = +lat;\r\n\t  var lng = +lng;\r\n\t  var ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.sqrt(Math.abs(lng));\r\n\t  ret += (20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0 / 3.0;\r\n\t  ret += (20.0 * Math.sin(lat * PI) + 40.0 * Math.sin(lat / 3.0 * PI)) * 2.0 / 3.0;\r\n\t  ret += (160.0 * Math.sin(lat / 12.0 * PI) + 320 * Math.sin(lat * PI / 30.0)) * 2.0 / 3.0;\r\n\t  return ret\r\n\t},\r\n\t\r\n\ttransformlng : function(lng, lat) {\r\n\t\tvar x_PI = this.x_PI;\r\n\t\tvar PI = this.PI;\r\n\t\tvar a = this.a;\r\n\t\tvar ee = this.ee;\r\n\t  var lat = +lat;\r\n\t  var lng = +lng;\r\n\t  var ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.sqrt(Math.abs(lng));\r\n\t  ret += (20.0 * Math.sin(6.0 * lng * PI) + 20.0 * Math.sin(2.0 * lng * PI)) * 2.0 / 3.0;\r\n\t  ret += (20.0 * Math.sin(lng * PI) + 40.0 * Math.sin(lng / 3.0 * PI)) * 2.0 / 3.0;\r\n\t  ret += (150.0 * Math.sin(lng / 12.0 * PI) + 300.0 * Math.sin(lng / 30.0 * PI)) * 2.0 / 3.0;\r\n\t  return ret\r\n\t},\r\n\t\r\n\t/**\r\n\t * 判断是否在国内，不在国内则不做偏移\r\n\t * @param lng\r\n\t * @param lat\r\n\t * @returns {boolean}\r\n\t */\r\n\tout_of_china : function(lng, lat) {\r\n\t\tvar lat = +lat;\r\n\t\tvar lng = +lng;\r\n\t\t// 纬度3.86~53.55,经度73.66~135.05 \r\n\t\treturn !(lng > 73.66 && lng < 135.05 && lat > 3.86 && lat < 53.55);\r\n\t}\r\n  \r\n};\r\n\r\n/* harmony default export */ var util = (coordtransform);\n// CONCATENATED MODULE: ./src/index.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gmapx", function() { return src_gmapx; });\n \r\n/* layers */\r\n\r\n \r\n\r\n\r\n // 矢量图\r\n // 统计图表\r\n // 热力图\r\n // 迁徙图\r\n // GeoGlobe Visuals 图层\r\n\r\n/* sources */\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* others */\r\n \r\n \r\n\r\nconst src_gmapx = {\r\n\tMap: modules_Map,\r\n\textent: extent_namespaceObject,\r\n\tutil: {\r\n\t\tcoordtransform: util,\r\n\t\tsequenceId: 0\r\n\t},\r\n\tui:{},\r\n\tsource: {\r\n\t\tWMS: source_WMS,\r\n\t\tWMTS: source_WMTS,\r\n\t\tWFS: source_WFS,\r\n\t\tGeoJSON: source_GeoJSON,\r\n\t\tRaster: source_Raster,\r\n\t\tRTDS: source_RTDS\r\n\t},\r\n\tlayer: {\r\n\t\tTile: layer_Tile,\r\n\t\tVectorTile: layer_VectorTile,\r\n\t\tMapV: layer_MapV,\r\n\t\tVector: layer_Vector,\r\n\t\tStatisticalChart: layer_StatisticalChart,\r\n\t\tHeatmap: layer_Heatmap,\r\n\t\tMigrate: layer_Migrate,\r\n\t\tVisuals: layer_Visuals\r\n\t},\r\n\tCONTEXT_ROOT: \'/jfw\',\r\n\t// 跨域访问代理辅助·~\r\n\tPROXY_URL: \'http://\' +  window.location.host  +  \'/ProxyServlet/proxyHandler?url=\',\r\n\tversion: \'0.1.8.20180801\'\r\n}\r\n\r\n\n\n//# sourceURL=webpack:///./src/index.js_+_19_modules?')}]));