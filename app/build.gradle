apply plugin: 'com.android.application'

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {

    viewBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion rootProject.ext.compileVersion
    defaultConfig {
        applicationId "com.ray.project"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 2
        versionName "1.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // 默认是android的渠道
        manifestPlaceholders.put("BAIDU_CHANNEL_VALUE", "android")
        signingConfig signingConfigs.debug
    }

    signingConfigs {
        debug {
            storeFile file("../raykey")
            keyAlias "raykey"
            keyPassword "123456"
            storePassword "123456"
        }
        release {
            storeFile file("../raykey")
            keyAlias "raykey"
            keyPassword "123456"
            storePassword "123456"
        }
    }

    // 自定义打包时apk名字
    android.applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            // 输出apk名称为app_v3.0(45)_pp.apk
            //outputFileName = "app_v${defaultConfig.versionName}(${defaultConfig.versionCode})_${variant.productFlavors[0].name}.apk"

            if(variant.buildType.name == ('release')) {
                outputFileName = "app${defaultConfig.versionName}_${defaultConfig.versionCode}_${variant.productFlavors[0].name}_${releaseTime()}.apk"
            } else if(variant.buildType.name == ('debug')) {
                outputFileName = "app${defaultConfig.versionName}_${defaultConfig.versionCode}_${variant.productFlavors[0].name}_debug.apk"
            }
        }
    }

    // 多渠道打包
    flavorDimensions "default"
    productFlavors {
        ray {
            dimension "default"
            // 修改包名
            // applicationId "com.xxx"
            manifestPlaceholders = [BAIDU_CHANNEL_VALUE: "android"]
            signingConfig signingConfigs.release
        }
        rayTest {
            dimension "default"
            // 修改包名
            // applicationId "com.xxx"
            manifestPlaceholders = [BAIDU_CHANNEL_VALUE: "testRay"]
            signingConfig signingConfigs.release
        }
    }
    productFlavors.configureEach {
        flavor -> flavor.manifestPlaceholders = [BAIDU_CHANNEL_VALUE: name]
    }

    buildTypes {
        debug {
            manifestPlaceholders =
                    [LAUNCHER_MODE: "android.intent.category.LAUNCHER"]
        }

        release {
            manifestPlaceholders =
                    [LAUNCHER_MODE: "android.intent.category.LAUNCHER"]
            // true - 打开混淆
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "boolean", "releasePackage", "true"
        }
    }

    // 移除lint检测的error
    lintOptions {
        abortOnError false
    }

    //    splits {
    //        abi {
    //            enable true
    //            reset()
    //            include 'x86', 'armeabi-v7a','x86_64'
    //            universalApk true
    //        }
    //    }
    sourceSets {
        main {
            jniLibs.srcDir 'libs'
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

configurations.configureEach {
//    resolutionStrategy {
//        force "com.android.support:support-v4:28.0.0"
//    }
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            print(requested.name)
            details.useVersion '28.0.0'
//            if (!requested.name.startsWith("multidex")) {
//
//            }
        }
    }
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportAppcompatVersion}"
    implementation "androidx.appcompat:appcompat:${rootProject.ext.supportAppcompatVersion}"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    androidTestImplementation "com.android.support.test:runner:${rootProject.ext.testRunnerVerion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${rootProject.ext.testEspressoVersion}"
    implementation "com.jakewharton:butterknife:${rootProject.ext.butterknifeVersion}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${rootProject.ext.butterknifeVersion}"
    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    // Retrofit通过GSON将结果转换为Bean对象
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'
    // 让Retrofit支持RxJava
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    // RxJava
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'
    // 日志拦截器
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'
    implementation 'com.github.bumptech.glide:glide:4.5.0'
    implementation 'jp.wasabeef:glide-transformations:4.3.0'
    // If you want to use the GPU Filters
    implementation 'jp.co.cyberagent.android:gpuimage:2.1.0'
    implementation 'top.zibin:Luban:1.1.8'

    implementation "com.tencent:mmkv:${rootProject.ext.mmkvVersion}"

    implementation project(':photoLibrary')

    implementation "androidx.room:room-runtime:${rootProject.ext.roomVersion}"
    annotationProcessor "androidx.room:room-compiler:${rootProject.ext.roomVersion}"
    // For Kotlin use kapt instead of annotationProcessor
    // 对于Kotlin来说，使用kapt而不是annotationProcessor
    // kapt "androidx.room:room-compiler:${rootProject.ext.room_version}"
}
